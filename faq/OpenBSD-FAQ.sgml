<!-- 
From Illuminatus.MZ.Rhein-Main.DE!news-mail-gateway Sun Jul 13 10:48:15 1997
Path: Illuminatus.MZ.Rhein-Main.DE!news-mail-gateway
From: jkatz@cpio.org (J. Joseph Max Katz)
Newsgroups: illuminatus.lists.openbsd.misc
Subject: new FAQ version!
Message-ID: <Pine.NEB.3.95.970712161757.4635A-100000@corinne.cpio.org>
Date: 12 Jul 97 21:19:44 GMT
Sender: zephyr.ccrc.wustl.edu!xmisc-request
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Organization: Illuminatus mail2news gate
Approved: volker@illuminatus.mz.rhein-main.de
Lines: 581
Xref: Illuminatus.MZ.Rhein-Main.DE illuminatus.lists.openbsd.misc:267


There will be an HTML version of this soon.

-Jon

970712 jkatz@openbsd.org

  -Jon	   College Sophomore   *   OpenBSD Enthusiast   *   T. Sax
  -  Founder and President, Corinne Posse * http://posse.cpio.org  - 
  jkatz@cpio.org   *   http://www.cpio.org   *   http://jon.katz.com
  "OpenBSD: high performance computing for high performance people."

-->
<!doctype linuxdoc system>

<article>

<title>OpenBSD New User FAQ
<author>by Jonathan Katz, <tt><htmlurl url="mailto:jkatz@OpenBSD.ORG"
name="jkatz@OpenBSD.ORG"></tt>
</author>

<date>v .2, 1997-Jul-12 21:19:44 GMT

<abstract>
These are a few of the questions that seem to be asked every so-often on
the mailing list. This is very early in the making for such a document, so
if it doesn't contain what you are looking for, please ask and feel free
to contribute. This document <bf>DOES NOT</bf> cover the installation process.

Brought to SGML by Volker Schmidt, <tt><htmlurl url="mailto:volker@Illuminatus.MZ.Rhein-Main.DE"
name="volker@Illuminatus.MZ.Rhein-Main.DE"></tt>
</abstract>

<!-- 
Sections:

1) Non-standard hardware, my GENERIC or INSTALL kernel won't boot OR 
	"I can't get my hardware to work."
2) Virtual Consoles
3) How to compile a kernel
4) Getting source code
5) Rebuilding my system
6) Ethernet quirks
7) Problems loading X11 (XFree86)
8) Finding other software (ports).
9) Where do I get my OpenBSD 2.1 CD?
10) disklabel and fdisk
11) Miscellany (HELP!)

-->

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<sect>Non-standard hardware, my GENERIC or INSTALL kernel
won't boot OR "I can't get my hardware to work."<label
id="non-std-hw">

<p>My foobar 1230 SCSI adapter (or other peripheral) has a
non-standard irq and doesn't work with the <em/GENERIC/ or
<em/INSTALL/ kernels!

<p>Yes it does. With a little tinkering and patience,
anything can be accomplished.  At the OpenBSD boot prompt type
"<tt>-c</tt>". IT should look something like this:

<tscreen><verb>
[OpenBSD boot Rev. 1.0a]
boot>> -c
</verb></tscreen>

You will eventually get a '<tt/UKC&gt;'/ prompt. Here you can
type "<tt/list/" and list all the devices that are compiled
into this kernel. Once you find the name of the device you'd
like to change, type "<tt/change devicename/". <tt/UKC/ will
guide you through the different attributes of the device that
can be configured.  Once you are finished adding the necessary
configurations, you'll be back at the <tt/UKC/ prompt. At the
prompt type "<tt/quit/" and your machine will continue to boot,
with the updated info.

In addition, other device drivers (sound cards, etc) that are
compiled into the kernel may conflict with other drivers. If
your kernel locks up during the boot process take note of the
device that it failed on. Try disabling that device, or the
one FOLLOWING it when you do your "list" at the '<tt/UKC&gt;/'
prompt.

<sect>Virtual Consoles

<p>To start, virtual consoles are only supported on the i386
port. The default <em/GENERIC/ kernel (the one you normally
get after doing an install) has support for virtual consoles
compiled in. If you are using an older <em/GENERIC/ kernel,
or a different kernel, support for "vt0" (the kernel device
that controls virtual consoles) may not be included. If you
are using the 2.1 release <em/GENERIC/ kernel, you will have
virtual consoles enabled.

<p>On the 2.1 CD and FTP sites, the <em/GENERIC/ kernel does not
use virtual consoles. You must recompile the kernel commenting
out the line that says "<tt/pc0/" and uncommenting the line
that says "<tt/vt0/." For more information on compiling a new
kernel, read on.

<sect1>Now that I have virtual consoles, how do I use them?

<p>Unlike Linux, you need to hit <tt/cntrl+alt+fn/ to swap from
console to console. By default (with the files in <tt>/dev/</tt>
from your install, and a newly compiled kernel with vt0 support)
you have four (<em/F1/ through <em/F4/) virtual consoles. If
you make more <tt>ttyC</tt> devices in <tt>/dev</tt> (done via:
"<tt>cd /dev; MAKEDEV ttyC4; MAKEDEV ttyC5;  MAKEDEV ttyC6;
MAKEDEV ttyC7;</tt>) and edit <tt>/etc/ttys</tt> so that all the
tty's are on, you will have a standard eight virtual consoles.

<sect>How do I compile a kernel?

<p>Kernels can be compiled in under 9 steps (<em/WOW!/)

<enum>

<item>get the source code via <em/FTP/, <em/CTM/, or <em/CVS/
(skip to <ref id="cvs-sec" name="CVS section"> if need be)

<item><tt>cd /usr/src/sys/arch/(your_machine_type)/conf</tt>

<quote>

<em/NOTE:/ (your_machine_type) will vary with what kind of
processor you use.

On my VAX 3400, it would be: <tt>/usr/src/sys/arch/vax/conf</tt>

On my P5/100 it would be: <tt>/usr/src/sys/arch/i386/conf</tt>

On my Sparc IPC it would be:
<tt>/usr/src/sys/arch/sparc/conf</tt>

</quote>

<item>edit a config file to your liking and save it as a
new name.

<quote>

(vi GENERIC; :w NEW_KERNEL_NAME :q)

Things to keep in mind:

<quote>

Make your kernel name snazzy (you don't HAVE to do that).

Most people keep their kernel names in caps (general
convention).

</quote>

</quote>

<item>type "config NEW_KERNEL_NAME"

<quote>

If all goes according to plan it will tell you to "<tt>don't
forget to make depend!</tt>" If config chokes on your file,
look at what it says and play with your configuration until
you get it right.

</quote>

<item><tt>cd
/usr/src/sys/arch/(your_machine_type)/compile/NEW_KERNEL_NAME</tt>

<quote>

<em/NOTE:/ config makes that DIRECTORY "<tt/NEW_KERNEL_NAME/"
all by itself.

</quote>

<item><tt>make depend ; make</tt>

<item><tt/su/ (if not root already)<tt>; cp /bsd /bsd.old;
cp bsd /bsd</tt>

<item>shutdown/reboot your system.

<item>Enjoy your custom kernel <bf/:-)/

</enum>

<sect>How do I get source code?<label id="cvs-sec">

<p>OpenBSD source code is obtained via CVS, FTP or CTM. If
you've ftp'd the distribution of OpenBSD, it should be pretty
simple for you to figure out how to FTP the source. CTM is
covered in its own document on the WWW server. As for CVS,
here is your crash course.  I've found that getting code via
CVS is fast, easy, and means you get newer/better/bugfixed code.

<p>

<em/NOTE:/ For example purposes I'm using anoncvs.OpenBSD.ORG which
is a few miles of fiber away from me in the United States. You
may want to pick a nearer cvs site for you to use (especially
if you are downloading the tree, as downloading OpenBSD's
powerful crypto from the States to sites in Europe breaks
various laws). See the OpenBSD WWW sites for a cvs mirror
close to home. If these instructions are not working for you,
please skip to the section that talks about the <ref
id="pserver" name="&dquot;pserver&dquot;">
that has been set-up in order to alleviate the headache of a
proxy/firewall that may be causing you some grief.

<p>INITIAL USE:

<tscreen><verb>
cd /usr
setenv CVSROOT anoncvs@anoncvs.OpenBSD.ORG:/cvs
cvs -z 9 -q get -PA src
</verb></tscreen>

<P>UPDATE USE:

<tscreen><verb>
cd /usr/src
setenv CVSROOT anoncvs@anoncvs.OpenBSD.ORG:/cvs
cvs -z 9 -q up -PAd
</verb></tscreen>

<P>"pserver" WORK-AROUND:<label id="pserver">

<tscreen><verb>
cd /usr
setenv CVSROOT :pserver:anoncvs@anoncvs5.usa.OpenBSD.ORG:/cvs
cvs login
<type any password, it will return ok...work>
cvs -z9 -q get src ..
</verb></tscreen>

<p>&#91;From: Todd Miller... <tt><htmlurl url="mailto:millert@OpenBSD.ORG" name="millert@OpenBSD.ORG"></tt>&#93;

<p>A quick explanation of the flags:

<descrip>

<tag>"-z 9"</tag>turns on compression --- the same as "<tt/gzip
-9/"

<tag>"-q"</tag>makes it quiet, as CVS can generate a lot
of output

<tag>"-d"</tag>will create and update new directories if your
tree does not have them

<tag>"-P"</tag>prunes out old directories

<tag>"-A"</tag>resets sticky tags

</descrip>


<sect>How do I rebuild my system?

<P>Depending on what version system you have and what version
source you have, it can be as easy as four steps, and as lengthy
as 22. If you have a 2.1 CD (or downloaded 2.1) and are using
"<tt/-current/" sources, you should be able to recompile in
four steps. In order to get 2.1 (and later) versions to compile
on a 2.0 based system, things get a little tricky.

<sect1>"The Four Steps" (as opposed to the Four Questions)

<P>If you want to be risky, you can just try doing a "<tt/make
-k build/" in <tt>/usr/src</tt> --- the four steps below follow
a prudent guideline for making a new system.

<P>

<enum>

<item><tt>cd /usr/src/share/mk; make install</tt>

<item><tt>mkdir /usr/obj; cd /usr/src; make obj</tt>

<item><tt>make -k build &amp;&amp; make install</tt>

<item><tt>make cleandir</tt>

</enum>

<P>A quick explanation:

<enum>

<item>"fixes" Makefiles and make (if broken, which sometimes
happens)

<item>makes the directory for objects, then makes the objects

<item>builds the entire system. "<tt/-k/" is a flag to make that
tries to have make progress if there are any errors. "<tt/make
build/" also builds the dependencies. "<tt/make install/"
makes SURE it gets installed --- "<tt/make build/" is supposed
to do the installing.

<item>this cleans up the source tree (deletes out extra
binaries, etc)

</enum>

<sect1>The long version.

<P>These are very detailed instructions given to
misc@OpenBSD.ORG from Marco Hyman. If you aren't too paranoid,
you can actually skip some of the stuff in there, at your own
risk. Please read through carefully. If you aren't careful,
you can actually hose your system up <bf/:(/

<P>

<TSCREEN><VERB>
From marc@dumbcat.codewright.com Sun May  4 17:57:34 1997
Date: Sat, 03 May 1997 12:10:35 -0700
From: Marco S Hyman <marc@dumbcat.codewright.com>
To: tech@openbsd.org, misc@openbsd.org
Subject: From 2.0 to current in 22 steps

Someone (Theo?) recently said that updating from a 2.0 to
current was a bitch.  That sounded enough like a challenge
that I thought I'd try it --- and document what I had to do at
the same time.  Hope this is helpful to others.

Given:
 o System running 2.0 code
 o -current source tree mounted as /usr/src.  My -current
   source lives on a different host, so it happens to be
   NFS mounted.  This code was current as of 1 May.
 o An empty /usr/obj on the local disk.

Variables:

 * $arch=i386, the architecture I'm generating the
   code for
 * $config=TRAVEL, my configuration file.  This is a copy
   of ALL with everything I don't use commented out and a
   few minor changes. Travel is a Toshiba laptop and I wanted
   the PCMCIA modem to be com1 and the PCMCIA ethernet card
   to be either ed0 or ep0, depending upon which flavor or
   card I happen to be using.

Ok, here are the steps.  Disclaimer mode:
 - Some may not be necessary.
 - There may be necessary steps that I missed and just luckely
   have not run into problems yet.
 - The order that I did things may be wrong.
 - Etc.

[ FAQ assembler's note: This mailing was hearlded by some as a
masterpiece rivaling the Magna Carta :) ]


 [ 1] cd /usr/src/share/mk && make install
      use the new make for everything

 [ 2] cd /usr/src/includes && make includes
      use the new included for everything

 [ 3] cd /usr/src/bin/pdksh && make && make install && make clean
      This is installed as /bin/sh which is needed for the next
      step.
      The 2.0 /bin/sh does not work with making the object links.
      The `make clean' step is to get the $arch specific objects
      out of the source directory.

 [ 4] cd /usr/src && make obj
      make the obj links so that code is generated on the local
      disk, not the NFS mounted source disk.  (Note: the kernel
      is still generated in /sys/arch/$arch/compile/$config).

 [ 5] cd /usr/src/usr.bin/mktemp && make && make install
      mktemp is required to generate a kernel

 [ 6] cd /usr/src/usr.sbin/config && make depend && make && make
      install The latest config MUST be used to generate the new
      kernel. If you don't use this config you won't get past
      the "make depend" step of kernel generation.

 [ 7] cd /sys/arch/$arch/conf edit your $config file if
      necessary.

 [ 8] config $config
      generate required files to build updated kernel.

 [ 9] cd ../compile/$config && make clean && make depend && make
      Don't forget the make clean.  It may not be necessary, but
      doesn't hurt in any case.  The new config may have even
      warned you to do this.

 [10] mv /bsd /bsd- && mv bsd /
      Get ready...


 [11] reboot
      Reboot your box and watch the console to see what's going
      on. In my case all went well.  Xdm started and gave me my
      console login. I ssh'd from another host, su'd, and then
      re-mounted the current source on /usr/src.
      "uname -a" says:

        OpenBSD travel.codewright.com 2.1 TRAVEL#0 i386

 [12] cd /usr/src && make cleandir
      We start with this step of the build process because the 
      /usr/src/share/mk and the include files were installed
      above.

 [13] cd /usr/src/usr.bin/compile_et && make depend && make &&
      make install this tool is required to build the libraries.

 [14] cd /usr/src/usr.bin/mk_cmds && make depend && make && make
      install this tool is required to build the libraries

 [15] cd /usr/src/lib && make depend && make && make install
      Go and have dinner then see a movie.  This should be done
      just about the time you get back to the console.  At least
      that's how long it takes on my old pentium portable.

 [16] cd /usr/src/gnu/usr.bin/ld && make depend && make && make
      install needed for the gnu libraries (libg++ will fail)

 [17] cd /usr/src/gnu/lib && make depend && make && make install

 [18] cd /usr/src/kerberosIV && make build

 [19] cd /usr/src/gnu/usr.bin/texinfo && \
      make -f Makefile.bsd-wrapper && \
      make -f Makefile.bsd-wrapper install
      The updated makeinfo is required by gcc which is generated
      before makeinfo when doing a standard `make'

 [20] cd /usr/src && make depend && make && make install

 [21] reboot
      See that everything comes up.  If your source lives on a
      remote machine (like mine does), mount it on /usr/src.

 [22] cd /usr/src && make build
      This step is optional.  I like to use the generated
      system to regenerate the full system just to ensure
      that all is OK.
      Probably best to start this before you go to bed.
      It might be done by the time you wake up.

As I type this I've completed steps 1-21.  Step 22 is in
progress.  I'll mail out an update if I run into any problems.
Again, I hope this is helpful to others.

// marc

</VERB></TSCREEN>

<P>There you have it!

<sect>Why can't I use my old linux ifconfig commands and flags?

<P>Linux's implementations of "ifconfig" and "route" are not
standard.  OpenBSD's versions are normal. To get my ne2000
clone working, I type:

<TSCREEN><VERB>
corinne# ifconfig ed2 205.212.82.80 up
corinne# route add default 205.212.82.1
</VERB></TSCREEN>

<P>That should work to get ANY ethernet interface working,
as long as you specify the correct IP numbers and interface.

<sect1>Whenever I do anything to the network I get a "device
timeout" error!?!


<P>This is because you have an incorrect hardware or irq address
assigned to your ethernet interface. To fix this, reboot the
machine with the "<tt/-c/" flag and change the attributes for
your ethernet interface. See the general instructions in <ref
id="non-std-hw" name="section 1"> of this FAQ on how to change
how the kernel talks to your hardware.


<sect1>Hey, my IP Aliasing breaks after trying to add a
third host!

<P>Aliasing one additional host usually isn't a big deal. When a
user tries to alias a third or fourth host, sometimes things
break. Adding "<tt/netmask 0xffffffff/" to the end of your
"<tt/ifconfig/" for adding the aliased host solves the
problem. i.e.:

<TSCREEN><VERB>
sparcy# ifconfig le0 alias 123.45.67.89 netmask 0xffffffff
</VERB></TSCREEN>

<sect1>How do I view the hosts that I've aliased?

<P>If you are using the 2.1 release, you must use netstat
to see what IP numbers you have added to your interface. In
"current" (post 1997-June-17) source, "<tt/ifconfig -a/"
will show your aliases.

<sect>Why won't XFree86 load on
my (insert really cool/expensive, you
know-it-will-work-because-you-checked-it-on-the-compatability-list
at xfree86.org)  graphics card?

<P>Some of the X servers require direct access to
"<tt>/dev/mem</tt>" (raw memory) in order to work. By default,
the OpenBSD kernel does not allow for this.  There are two
solutions:

<P>

<itemize>

<item>recompile a kernel with "option insecure" in your
configuration file.

<item>Use the "apature" Loadable Kernel Module (lkm) found in
the X11 distribution.

</itemize>

<P>In addition, the Matrox Millenium and possibly other cards
may require BOTH lkm be loaded as well as option insecure.


<sect>Where's pine (or other GNU/semi-free utility)?

<P>All about ports (as cribbed from <tt><htmlurl url="http://www.OpenBSD.ORG/ports.html" name="http://www.OpenBSD.ORG/ports.html"></tt>)

<P>OpenBSD is a fairly complete system of its own, but there
still is a lot of software that one might want see added to
their own system.  However, one has to draw the line on what
to include and leave out, as well as having to follow licensing
and export restrictions laws.  Because of these problems, some
software cannot be shipped with the system. We wanted to find
a way for users to easily get software we don't provide and
started to look around. We didn't have to look far because
a sibling project, FreeBSD, has an excellent mechanism for
exactly this purpose called "<bf/The Ports Collection/". After
thinking about it for a while we decided to try and use their
collection as is, feeding back necessary patches that make
the ports work on OpenBSD as well as FreeBSD.

<P>The ports idea is to have, for each piece of software,
a Makefile that describes where to download it from, how to
alter the sources (if needed) and how to build and install
it. Furthermore some patches will have to be kept in the
"<tt/port/" as well as some administration files for the package
registry utilities. Normally this information is kept in an
hierarchy under <tt>/usr/ports</tt> (this is configurable,
and can be changed). The entire ports tree can be found at

<P>

<tt><htmlurl
url="ftp://ftp.FreeBSD.org/pub/FreeBSD/FreeBSD-current/ports.tar.gz"
name="ftp://ftp.FreeBSD.org/pub/FreeBSD/FreeBSD-current/ports.tar.gz"></tt>

<P>Note that this isn't a file on their server, rather it
archives their directories on-the-fly. The entire collection
is almost 3.1M tarred and gzip'd and will probably be twice
that when uncompressed. The ports tree is also on the 2.1 CD.

<P>Let's say you managed to get a ports tree sitting under
<tt>/usr/portsi</tt>, then you should be able to something
like this:

<TSCREEN><VERB>
mitnick% su
mitnick# cd /usr/ports/archivers/unzip
mitnick# make
mitnick# make install
mitnick# exit
</VERB></TSCREEN>


<P> Easy, huh?

<sect>Where do I get my OpenBSD 2.1 CD?

<P>To preface, because OpenBSD contains powerful crypto, CDs are
being distributed from Canda, Sweden, and Argentina. CDs cost
&dollar;30 US plus shipping (&dollar;3-&dollar;8 US, generally). The CDs are a two CD
set, complete with binaries for the Alpha, i386, Sparc, Amiga,
Arc, Mac (68k), Pmax, and Motorola 68k VME systems, source
code, X11R6.3, XFree86 3.3 (binaries and sources). In addition,
The CDs are designed to be bootable on multiple architectures.

<P>This URL <tt><htmlurl url="http://www.OpenBSD.ORG/orders.html"
name="http://www.OpenBSD.ORG/orders.html"></tt> will take
you through the credit card on-line odering system. To order
VIA phone, call +1 (403) 605-8166 between 8AM and 5PM North
American Mountain Standard Time. Please have your American
Express, Master Card or Visa ready.

<sect><tt/disklabel/ and <tt/fdisk/

<P><tt/disklabel/ and <tt/fdisk/ are different in OpenBSD
than what most users are used to in different operating systems.

<P>In OpenBSD, the disklabel is the core program used to modify
and view a system's hard disk. <tt/disklabel/ is used to
establish the disk's partitions as well as write the OpenBSD
disklabel to disk. <tt/disklabel/ is also used to display
which partitions are which. By running <tt/disklabel/ with
an argument like "<tt/wd0/" (think "<tt/disklabel wd0/")
the output will show not only what partitions of the disk
are used by OpenBSD, but also what partitions can be used to
access DOS partitions. Please note that disklabel is used by
ALL platforms that OpenBSD supports.

<p>In all install procedures, disklabel is loaded up and the disk must be
partitioned. Disklabeling is done in 512-byte sectors, so have a calculator
ready <bf/:-)/

<p>A typical, finished disklabel looks like this:


<TSCREEN><VERB>
----[start disklabel]-----

# /dev/rsd0c:
type: SCSI
disk: SCSI disk
label: ST41200N
flags:
bytes/sector: 512
sectors/track: 70
tracks/cylinder: 15
sectors/cylinder: 1050
cylinders: 1931
total sectors: 2031705
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
drivedata: 0 

8 partitions:
#        size   offset    fstype   [fsize bsize   cpg]
  a:   163840        0    4.2BSD     1024  8192    16   # (Cyl.   0 - 156*)
  b:    92160   163840      swap                        # (Cyl. 156*- 243*)
  c:  2031705        0    unused        0     0         # (Cyl.   0 - 1934*)
  e:  1775705   256000    4.2BSD     1024  8192    16   # (Cyl. 243*- 1934*)

-----[end disklabel]-----
</VERB></TSCREEN>


<P>This is the disklabel from my DEC Alpha's SCSI disk ---
<tt>/dev/sd0</tt>. Letters "<tt/a-e/" are the different
partitions on the disk. When the OpenBSD install procedure
fires up disklabel, it generates the top 20 lines of the label.
It's up to you (the person doing the install) to mete out the
partitions as necessary for your system. The example I give
here is pretty generic.  Different systems will want to have
different sized partitions for different uses.


<P>To OpenBSD, there are a few special partition names that
are reserved and have a special purpose. Partition "<tt/a/"
is reserved for the root file system.  Partition "<tt/b/"
is reserved for swap space. "<tt/c/" is reserved as a way to
access the whole, raw disk. For compatibility reasons with
other *BSD's on the i386 platform, some people choose not to
use partition "<tt/d/". In setting up my Alpha, I left out
partition "<tt/d/", with no great loss.


<P>You don't have to be a math major to figure out how to
proclaim space using disklabel on your OpenBSD install. From
the disklabel above, the root partition ("<tt/a/") of the
install above is roughly 80 Megabytes large. How does "163840"
represent this?

<P>Some of us may remember some dimensional analysis from
chemistry.  This is much easier than finding Avagadro's
number...

<TSCREEN><VERB>
80 * 1024 * 1024 / 512 = 163840  
M ->  K  ->  b -> b/s  = sectors
</VERB></TSCREEN>

<P>(the long way)

<P>Since for us, the conversion factor will always be the same,
multiply the amount of Megs that you want in a partition by
"2048" and you'll get the amount of sectors you need to allot.

<TSCREEN><VERB>
80 * 2048 = 163840
</VERB></TSCREEN>

<P>(the easy way)


<P>Now that we know how to size out our partitions, we need
to know how to place them.

<P>Back to our example:

<TSCREEN><VERB>
#        size  offset  fstype  [fsize bsize  cpg]
  a:  163840       0  4.2BSD    1024  8192   16   # (Cyl.   0 - 156*)
  b:   92160  163840    swap                      # (Cyl. 156*- 243*)
  c: 2031705       0  unused       0     0        # (Cyl.   0 - 1934*)
  e: 1775705  256000  4.2BSD    1024  8192   16   # (Cyl. 243*- 1934*)
</VERB></TSCREEN>

<P>You'll notice the "offset" column. That tells the disklabel
where it should start the next partition. If you notice,
the offset for the first partition is 0 (zero), and for the
following partition it is the size of the previous partition.
This is because disklabel starts counting from 0 (zero) and
not from 1 (one).

<P>Remember, partition "<tt/c/" spans the entire disk, so
it's offset is 0 (zero) and it's size is the size of the disk
in sectors.

<P>The fstype column is used to write to the disklabel what kind
of filesystem should be on the disk. Notice for "<tt/b/", the
swap partition, it's filesystem is declared as "<tt/swap/" since
OpenBSD uses unformatted disk space for swapping.  Also not
that the "<tt/c/" partition must not have a filesystem on it,
otherwise it will scrub the disk. Most importantly, OpenBSD
uses the 4.2BSD ffs filesystem. Partitions like the root
partition and <tt>/usr</tt>, etc. need to be declared as "<tt/4.2BSD/"
in the disklabel!

<sect1>fsize, bsize, and cpg

<P><em/fsize/ is the minimum file size, a partial block that
is allocated for small files. <em/fsize/ should be smaller
than <em/bsize/.  <em/bsize/ is the blocksize for a normal
block of data on the partition.  <em/cpg/ is the amount
of cylinders per group, which is used for when some low
level programs do mappings and other low-level functions
on a per-cylinder basis. The defaults for this are 1024,
8192, and 16, respectively. This can be changed based on
your needs. For more information, check the FFS papers
in <tt><htmlurl url="file:/usr/share/doc/smm/03.fsck_ffs"
name="file:/usr/share/doc/smm/03.fsck&lowbar;ffs"></tt> for starters.

<sect1>FDISK...

<p>Unlike Linux, DOS, or FreeBSD, OpenBSD's fdisk is not
full-screen/interactive. fdisk is used to manipulate partitions
other than OpenBSD partitions as well as the MBR on various
hard disks. If you are sharing a disk between DOS and OpenBSD,
you can change which partition is active with fdisk. fdisk
can also be used to display the same partition information as
disklabel, although the format of the output is different.

<sect>XXYYZZ (system something) is broken!

<P>The OpenBSD source tree is always evolving. The 2.1 release
is wonderful and stable; however since the release snapshots
will be made with many bugfixes every so often.  Make sure
you are running the latest code before giving up. See the
OpenBSD ftp mirrors (as listed on the OpenBSD www sites) as
well as the <ref id="cvs-sec" name="CVS section"> on how to
obtain the source.  ALSO, watch the <tt/misc@OpenBSD.ORG/
and <tt/announce@OpenBSD.ORG/ mailing lists for vital
information. As another resource with your problems, check the
OpenBSD mailing list archive, where it is quite possible that
your question or concern has already been addressed.

<p>PS: always "<tt/man (utility)/" and "<tt/apropos
(problem)/" because the answer you are looking for can lurk
in the documentation.
</article>
