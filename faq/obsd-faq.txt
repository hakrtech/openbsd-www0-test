OpenBSD Frequently Asked Questions - Ver. 2.5 

This FAQ is specifically designed for the 2.5 release of OpenBSD, but in some
cases will work on earlier versions. This FAQ will take you through most 
critical steps to setting up your own OpenBSD system. The addressed
questions will range from newbie to advanced users. Hopefully you will
find this FAQ useful. 

This FAQ was recently updated to support the newest version of OpenBSD. To
view information for previous versions, please refer to FAQ section 11.0, or
errata.html. 

Any questions can be directed to: faq@openbsd.org 

The Current FAQ maintainers are:
Eric Jackson
Wim Vandeputte


1.0 - Introduction to OpenBSD

     1.1 - What is OpenBSD? 
     1.2 - What platforms are supported? 
     1.3 - Is OpenBSD really free? 
     1.4 - Why might I want to use OpenBSD? 
     1.5 - How can I help support OpenBSD? 
     1.6 - Who maintains OpenBSD? 

2.0 - Other OpenBSD information resources 

     2.1 - Web Pages 
     2.2 - Mailing Lists 
     2.3 - Manual Pages 
     2.4 - Reporting Bugs 

3.0 - Obtaining OpenBSD 

     3.1 - Buying an OpenBSD CD 
     3.1.1 - Buying OpenBSD T-Shirts 
     3.2 - Downloading via FTP or AFS 
     3.3 - Obtaining Current Source Code 

4.0 - Installation and Disk Setup 

     4.1 - Installing from CD 
     4.2 - Installing from FTP 
     4.3 - Installing via DHCP 
     4.4 - What files are needed for Installation? 
     4.5 - Using the OpenBSD disklabel 
     4.6 - Using fdisk 
     4.7 - Adding extra disks in OpenBSD 
     4.8 - How to swap to a file 
     4.9 - Soft-updates 
     4.10 - How much space do I need for an OpenBSD installation? 
     4.11 - When I boot after installation of i386 OpenBSD it says "partition 
	    3 id 0". 
     4.12 - How do I get a dmesg from a boot floppy? 
     4.13 - I changed scsi controllers and now I cannot boot OpenBSD. It just 
	    says: "reading boot.. Bad magic" 
	   ( Installing Boot blocks - i386 specific ) 

For Upgrading from various versions of OpenBSD, be sure to read the Upgrade 
Mini-FAQ at http://www.codetalker.com/greenbox/docs/obsd-upgrade-minifaq.html 

5.0 - Kernel Configuration and Setup 

     5.1 - Why do I need a custom kernel? 
     5.2 - Kernel configuration Options 
     5.3 - Building your own kernel 
     5.4 - Boot-time configuration 

6.0 - Networking 

     6.1 - Initial network setup 
     6.2 - IPF, NAT 
     6.3 - IPSEC 
     6.4 - DHCP 
     6.5 - PPP 

7.0 - Keyboard controls 

     7.1 - How do I remap the keyboard? 
     7.2 - Is there gpm or the like in OpenBSD? 

8.0 - General Questions 

     8.1 - What are these kerberos warnings when I first login? 
     8.2 - How do I change virtual terminals? 
     8.3 - I forgot my root password..... WHAT DO I DO?!? 
     8.4 - X craps out when I startup.. what am I doing wrong? 
     8.5 - What is CVS, and how do I use it? 
     8.6 - What is the ports tree? 
     8.7 - What are packages? 
     8.8 - Is there any way to use my floppy drive if it's not attached 
	   during boot? 

9.0 - Migrating from Linux 

     9.1 - Simple tips for ex-linux users 
     9.2 - Dual boot of Linux and OpenBSD 

10.0 - System Administration 

     10.1 - When I try to su to root it says that I'm in the wrong group 
     10.2 - How do I duplicate a filesystem? 
     10.3 - How do I get httpd, sendmail, etc to start up with the system? 
     10.4 - Why do users get relaying access denied when they are remotely 
	    sending mail through my OpenBSD system? 
     10.5 - I've set up POP, but I get errors when accessing my mail thru POP.
	    What can i do? 
     10.6 - Setting up a Secure HTTP Server using SSL(8) 
     10.7 - I made changes to /etc/passwd with vi(1), but the changes didn't 
	    seem to take place. Why? 
     10.8 - How do I add a user? or delete a user? 
     10.9 - How do I create a ftp-only account? 

11.0 - OpenBSD 2.4 Specific Information 

     11.1 - Why do I get UserDir errors when running httpd(8)? 
     11.2 - Installing at a partition 4GB or higher (i386 specific) 
     Log24.txt - Specific OpenBSD 2.4 Install Example 

12.0 - Performance Tuning 

     12.1 - Networking 
     12.2 - Disk IO 

1.0 - Introduction to OpenBSD

1.1 - What is OpenBSD?

The OpenBSD project produces a freely available, multi-platform
4.4BSD-based UNIX-like operating system. Our efforts place emphasis
on portability, standardization, correctness, and security. OpenBSD
supports binary emulation of most binaries from SVR4 (Solaris),
FreeBSD, Linux, BSDI, SunOS, and HPUX.


1.2 - On what systems does OpenBSD run?

OpenBSD 2.5 will install and run on the following platforms: 

     i386 - bootable 
     sparc - bootable 
     alpha - bootable 
     hp300 
     amiga 
     mac68k 
     powerpc 
     pmax 
          the pmax port is not included on the 2.5 cd. But can be
          downloaded from any of the OpenBSD ftp sites 

* note * - bootable means that for those smart people who bought the
cd, that it OpenBSD can be booted directly from the CD. 

Previous releases of OpenBSD also had ports for: 

     arc 
     mvme68k 

These were removed from the 2.4 release, but were included in 2.3 if you
are interested. You can see updated information about specific platforms
at http://www.openbsd.org/plat.html


1.3 - Is OpenBSD really free?

OpenBSD is all free. The binaries are free. The source is free. All parts of
OpenBSD have reasonable copyright terms permitting free redistribution.
This includes the ability to REUSE most parts of the OpenBSD source
tree, either for personal or commercial purposes. OpenBSD has put NO
further restrictions other than those implied by the original BSD license,
which will allow greater applicability. Because of this, software which is
written under stricter licenses cannot be included in the regular distribution
of OpenBSD. 

For futher reading on other popular licenses read:
http://www.openbsd.org/policy.html. 

The maintainers of OpenBSD support the project largely from their own
pockets. This includes the time spent programming for the project,
equipment used to support the many ports, the network resources used to
distribute OpenBSD to you, and the time spent answering questions and
investigating users' bug reports. The OpenBSD developers are not
independently wealthy and even small contributions of time, equipment,
and resources make a big difference. 


1.4 - Why might I want to use OpenBSD?

New users frequently want to know whether OpenBSD is superior to
some other free UNIX-like operating system. That question is largely
un-answerable and is the subject of countless (and useless) religious
debates. Do not, under any circumstances, ask such a question on an
OpenBSD mailing list. 

Below are some reasons why we think OpenBSD is a useful operating
system. Whether OpenBSD is right for you is a question that only you can
answer. 

     OpenBSD runs on many different hardware platforms. 
     OpenBSD is thought of by many security professionals to be the
     most secure UNIX-like operating system as the result of a
     10-member 1.5-year long comprehensive source code security
     audit. 
     OpenBSD is a full-featured UNIX-like operating system available
     in source form at no charge. 
     OpenBSD integrates cutting-edge security technology suitable for
     building firewalls and private network services in a distributed
     environment. 
     OpenBSD benefits from strong on-going development in many
     areas, offering opportunities to work with emerging technologies
     with an international community of programmers and end-users. 
     OpenBSD offers opportunities for ordinary people to participate in
     the development and testing of the product. 


1.5 - How can I help support OpenBSD?

We are greatly indebted to the people and organizations that have
contributed to the OpenBSD project. They are acknowledged by name
here: 

http://www.openbsd.org/donations.html 

OpenBSD has a constant need for several types of support from the user
community. If you find OpenBSD useful, you are strongly encouraged to
find a way to contribute. If none of the suggestions below are right for
you, feel free to propose an alternative by sending e-mail to
donations@openbsd.org. 

 -   Buy an OpenBSD CD. It includes the current full release of
     OpenBSD, and is bootable on many platforms. It also generates
     revenue to support the OpenBSD project, and reduces the strain
     on network resources used to deliver the distribution via the
     Internet. This inexpensive two-CD set includes full source.
     Remember, your friends need their own copy! 
 -   Donate money. The project has a constant need for cash to pay for
     equipment, network connectivity, and expenses relating to CD
     publishing. Manufacturing CDs requires an up-front out-of-pocket
     investment for the OpenBSD developers, without guaranteed
     return. Send e-mail to donations@openbsd.org to find out how to
     contribute. Even small donations make a profound difference. 
     Donate equipment and parts. The project has a constant need for
     general and specific hardware. Items such as IDE and SCSI disks,
     and various types of RAM are always welcome. For other types of
     hardware such as computer systems and motherboards, you
     should inquire as to current need. Write to
     donations@openbsd.org to arrange for shipment. 
 -   Donate your time and skills. Programmers who enjoy writing
     operating systems are naturally always welcome, but there are
     literally dozens of other ways that people can be useful. Follow
     mailing lists and help answer new-user questions. 
 -   Help maintain documentation by submitting new FAQ material (to
     faq@openbsd.org). Form a local user group and get your friends
     hooked on OpenBSD. Make a case to your employer for using
 -   OpenBSD at work. If you're a student, talk to your professors
     about using OpenBSD as a learning tool for Computer Science or
     Engineering courses. It's also worth mentioning one of the most
     important ways you should not try to "help" The OpenBSD
     project: do not waste your time engaging in operating system flame
     wars on Usenet newsgroups. It does not help the project to find
     new users and can cause substantial harm to important
     relationships that developers have with other developers. 


1.6 - Who maintains OpenBSD?

OpenBSD is maintained by a development team spread across many
different countries. The project is coordinated by Theo de Raadt, located
in Canada. 

2.0 - Other OpenBSD information resources

2.1 - Web Pages of Interest

The official website for the OpenBSD project is located at:
http://www.OpenBSD.org 

A lot of valuable information can be found here regarding about all
aspects of the OpenBSD project. 

Additional information for laptop users can be found at:
http://www.monkey.org/openbsd-mobile/ and
http://www.cpio.net/openbsd/laptops/ 


2.2 - Mailing Lists

The OpenBSD project maintains several popular mailing lists which users
should subscribe to and follow. To subscribe to a mailing list, send an
e-mail message to majordomo@openbsd.org. That address is an
automated subscription service. In the body of your message, on a single
line, you should include a subscribe command for the list you wish to join.
For example: 

subscribe announce 

The list processor will reply to you, asking for confirmation of your intent
to join the list. The confirmation you send back to the list processor will
be included in its reply to you. It will look something like this: 

auth 90855167 subscribe announce you@example.com 

Once you have confirmed your intent to join, you will be immediately
added to the list, and the list processor will notify you that you were
successfully added. 

To unsubscribe from a list, you will again send an e-mail message to
majordomo@openbsd.org. It might look like this: 

unsubscribe announce 

If you have any difficulties with the mailing list system, please first read the
instructions. They can be obtained by sending an e-mail message to
majordomo@openbsd.org with a message body of "help". These are the
currently-available OpenBSD mailing lists:

     announce - Important announcements. This is a low-volume list. 
     tech - General technical discussions 
     misc - User questions and answers 
     bugs - Bugs received via sendbug(1) and discussions about them. 
     source-changes - Automated mailing of CVS source tree
     changes. 
     ports - Automated mailing of CVS source tree changes. 
     advocacy - Discussion of advocating OpenBSD. 

Archives of the OpenBSD mailing lists can be found by visiting the mailing
lists web page: http://www.openbsd.org/mail.html 
You can also get mail archives from
http://www.monkey.org/cgi-bin/wilma ,here they have searchable archives
of the OpenBSD mailing lists. 

Another mailing list that may be of interest is
openbsd-mobile@monkey.org. Which is a discussion of the use of
OpenBSD in mobile computing. 

To subscribe to this list use: 

'echo subscribe | mail
"openbsd-mobile-request@monkey.org"' 

The archives for that can be found at:
http://www.monkey.org/openbsd-mobile/archive/ 


2.3 - Manual Pages

OpenBSD comes with extensive documentation in the form of manual
pages, as well as longer documents relating to specific applications. To
access the manual pages and other documentation, be sure that you
installed the man, misc, and text distributions. 

Here is a list of some of the most useful manual pages for new users: 

     afterboot(8) - things to check after the first complete boot 
     boot(8) - system boot strapping procedures 
     passwd.conf(5) - format of the password configuration file 
     adduser_proc(8) - procedure for adding new users 
     adduser(8) - command for adding new users 
     vipw(8) - edit the pass word file 
     man(1) - display the on-line manual pages 
     sendbug(1) - send a problem report (PR) about OpenBSD to a
     central support site. 
     disklabel(8) - Read and write disk pack label. 
     ifconfig(8) - configure network interface parameters. 
     route(8) - manualy manipulate the routing tables. 
     netstat(1) - show network status. 
     reboot, halt(8) - Stopping and restarting the system. 
     shutdown(8) - close down the system at a given time. 
     boot_config(8) - how to change kernel configuration at boot 

Also, If you are one of the people who didn't install the man*.tar.gz
package, you can find all the OpenBSD man pages on the web at
http://www.openbsd.org/cgi-bin/man.cgi. 

In general, if you know the name of a command or a manual page, you
can read it by executing `man command'. For example: `man vi' to
read about the vi editor. If you don't know the name of the command, or
if `man command' doesn't find the manual page, you can search the
manual page database by executing `apropos something' or `man
-k something' where something is a likely word that might appear in
the title of the manual page you're looking for. For example: 

bsd# apropos "time zone"
tzfile (5) - time zone information
zdump (8) - time zone dumper
zic (8) - time zone compiler

The parenthetical numbers indicate the section of the manual in which that
page can be found. In some cases, you may find manual pages with
identical names living in separate sections of the manual. For example,
assume that you want to know the format of the configuration files for the
cron daemon. Once you know the section of the manual for the page you
want, you would execute `man n command' where n is the manual
section number. 

bsd# man -k cron
cron (8) - daemon to execute scheduled commands (Vixie Cron)
crontab (1) - maintain crontab files for individual users (V3)
crontab (5) - tables for driving cron
bsd# man 5 crontab

In addition to the UNIX manual pages, there is a typesettable document
set (included in the misc distribution). It lives in the /usr/share/doc
directory. If you also installed the text distribution, then you can format
each document set with a `make' in the appropriate subdirectory. The psd
subdirectory is the Programmer's Supplementary Documents distribution.
The smm subdirectory is the System Manager's Manual. The usd
subdirectory is the UNIX User's Supplementary Documents distribution.
You can perform your `make' in the three distribution subdirectories, or
you can select a specific section of a distribution and do a `make' in its
subdirectory. Some of the subdirectories are empty. By default,
formatting the documents will result in Postscript output, suitable for
printing. The Postscript output can be quite large -- you should assume
250-300% increase in volume. If you do not have access to a Postscript
printer or display, you may also format the documents for reading on a
terminal display. In each Makefile you'll need to add the flag -Tascii to
each instance of the groff commands (or execute it by hand). Some of the
documents use the ms formatting macros, and some use the me macros.
The Makefile in each document subdirectory (eg,
/usr/share/doc/usd/04.csh/Makefile) will tell you which one to use. For
example: 

bsd# cd /usr/share/doc/usd/04.csh
bsd# groff -Tascii -ms tabs csh.1 csh.2 csh.3 csh.4 csh.a csh.g > csh.txt 
bsd# more csh.txt

The UNIX manual pages are generally more current and trustworthy than
the typesettable documents. The typesettable documents sometimes
explain complicated applications in more detail than the manual pages do. 


2.4 - Reporting Bugs

Proper bug reporting is one of the most important responsibilities of end
users. Very detailed information is required to diagnose most serious
bugs. Developers frequently get bugs reports via e-mail such as these: 

Before submitting any bug report, please ready
http://www.openbsd.org/report.html 

From: joeuser@example.com
To: bugs@openbsd.org
Subject: HELP!!!

I have a PC and it won't boot!!!!! It's a 486!!!!!


Hopefully most people understand why such reports get summarily
deleted. All bug reports should contain detailed information. If Joe User
had really wanted his bug investigated, his bug report would have looked
something like this: 

From: smartuser@example.com
To: bugs@openbsd.org
Subject: 2.4 panics on an i386

After installing OpenBSD 2.4 from the CD which I purchased via your outstanding
on-line ordering system, I find that the system halts before the kernel even
gets loaded. After booting with a bootdisk and escaping to a shell. This is the
dmesg output:
 
OpenBSD 2.4 (PLASMA) #2: Thu Dec 24 23:27:17 GMT 1998
    root@plasma:/sys/arch/i386/compile/PLASMA
cpu0: Intel Pentium (P54C) ("GenuineIntel" 586-class) 90 MHz
cpu0: F00F bug workaround installed
BIOS mem  = 654336 conventional, 32505856 extended
real mem  = 33161216
avail mem = 28893184
using 430 buffers containing 1761280 bytes of memory
mainbus0 (root)
bios0 at mainbus0: AT/286+(e9) BIOS, date 08/14/97
bios0: pciinfo 0xf031b00c apminfo 0xf031b028 diskinfo 0xf031b050 cksumlen 1 memmap 0xf031b0cc
apm0 at bios0: Power Management spec V1.1
apm0: AC on, battery charge [no battery]
pci0 at mainbus0 bus 0: configuration mode 1 (bios)
pchb0 at pci0 dev 0 function 0 "Intel 82439TX System Controller (MTXC)" rev 0x01
"Intel 82371AB PIIX4 ISA Bridge" rev 0x01 at pci0 dev 7 function 0 not configured
"Cirrus Logic CL-GD5446" rev 0x45 at pci0 dev 17 function 0 not configured
isa0 at mainbus0
ep0 at isa0 port 0x300-0x30f irq 3: address 00:10:4b:25:b4:4c, utp (default utp)
lpt0 at isa0 port 0x378-0x37b irq 7
isadma0 at isa0
wdc0 at isa0 port 0x1f0-0x1f7 irq 14
atapibus0 at wdc0
wd0 at wdc0 drive 0: <WDC AC21600H>
wd0: 1549MB, 3148 cyl, 16 head, 63 sec, 512 bytes/sec (128KB cache)
wd0: using 16-sector 16-bit pio transfers, lba addressing
wdc1 at isa0 port 0x170-0x177 irq 15
atapibus1 at wdc1
acd0 at atapibus1 drive 1: <BCD 24XM CD-ROM, VER 1.0> ATAPI 5/cdrom removable
acd0: 1367Kb/sec, 128Kb cache, audio play, 255 volume levels
npx0 at isa0 port 0xf0-0xff: using exception 16
pccom0 at isa0 port 0x3f8-0x3ff irq 4: ns16550a, 16 byte fifo
pccom1 at isa0 port 0x2f8-0x2ff irq 3: ns16550a, 16 byte fifo
pcvt: doreset() - got KEYB_R_RESEND response ... [one time only msg]
pcvt: doreset() - Caution - no PC keyboard detected!
vt0 at isa0 port 0x60-0x6f irq 1: unknown Cirrus, 80 col, color, 8 scr, unknown kbd
fdc0 at isa0 port 0x3f0-0x3f7 irq 6 drq 2
fd0 at fdc0 drive 0: 1.44MB 80 cyl, 2 head, 18 sec
biomask c040 netmask c048 ttymask c0ca
root on wd0a
pctr: Pentium performance counters and user-level cycle counter enabled
dkcsum: wd0 matched BIOS disk 80
rootdev=0x0 rrootdev=0x300 rawdev=0x302

Thank you!

If Joe User had a working OpenBSD system from which he wanted to
submit a bug report, he would have used the sendbug(1) utility to submit
his bug report to the GNATS problem tracking system. Obviously you
can't use sendbug(1) when your system won't boot, but you should use it
whenever possible. You will still need to include detailed information
about what happened, the exact configuration of your system, and how to
reproduce the problem. The sendbug(1) command requires that your
system be able to deliver electronic mail successfully on the Internet. 

If you have submitted a bug report and you want to check its current
status without annoying anyone, the best ways are: 

     Visit the GNATS tracking system:
     http://cvs.openbsd.org/cgi-bin/wwwgnats.pl. 
     Look in the bugs@openbsd.org list archives:
     http://www.openbsd.org/mail.html. 

3.0 - Obtaining OpenBSD

3.1 - Buying an OpenBSD CD

Purchasing an OpenBSD CD is generally the best way to get started.
Visit the ordering page to purchase your copy:
http://www.openbsd.org/orders.html. 

There are many good reasons to own an OpenBSD CD: 

     CD sales support on-going development of OpenBSD. 
     Development of a multi-platform operating system requires
     constant investment in equipment. 
     Your support in the form of a CD purchase has a real impact on
     future development. 
     The CD contains binaries (and source) for all supported platforms. 
     The CD is bootable on several platforms, and can be used to
     bootstrap a machine without a pre-existing installed operating
     system. 
     The CD is useful for bootstrapping even if you choose to install a
     snapshot. 
     Installing from CD is faster! Installing from CD preserves network
     connectivity resources. 
     OpenBSD CD's always come with very nice stickers. You system
     isn't fully complete without these. You can only get these stickers
     by buying a CD set or donating hardware. 

If you're installing a release version of OpenBSD, you should use a CD.
Snapshot releases can only be installed over the network. 

3.1.1 - Buying OpenBSD T-Shirts

Yes, OpenBSD now has t-shirts for your wearing enjoyment. You can
view these at http://www.OpenBSD.org/tshirts.html. Enjoy :) 

3.2 - Downloading via FTP or AFS

There are numerous international mirror sites offering FTP access to
OpenBSD releases and snapshots. AFS access is also available. You
should always use the site closest to you. Before you begin fetching a
release or snapshot, you may wish to use ping and traceroute to
determine which mirror site is nearest to you and whether that nearest
mirror is performing adequately. Of course, your OpenBSD release CD
is always closer than any mirror. Access information is here: 

http://www.openbsd.org/ftp.html 

3.3 - Obtaining Current Source Code

Source to OpenBSD is freely redistributable and available at no charge.
Generally the best way to get started with a current source tree is to install
the source from the most recent CD and then configure AnonCVS to
update it regularly. Information about AnonCVS, including how to set it
up, is available here: 

http://www.openbsd.org/anoncvs.html. 

or check The OpenBSD FAQ 

If you don't have sufficient network bandwidth to support AnonCVS, or
if your Internet access is via UUCP, you can still keep your source
current by using CTM instead of AnonCVS. If that's your situation, then
starting with a recent release CD is even more important. Information
about CTM, including how to set it up, is available here: 

http://www.openbsd.org/ctm.html. 

4.1 - Installing from the OpenBSD CD

Installing from a CD is definatly the BEST choice, but first you must have
purchased a cd. You can obtain a cd from
http://www.openbsd.org/orders.html. If you are using either the i386,
SPARC or Alpha platforms you can boot directly off the CD. If not, you
will have to create a bootdisk. You can get the boot disk from
ftp://ftp.openbsd.org/pub/OpenBSD/2.5/$ARCH/floppy25.fs

To create this boot disk, use either the unix tool dd(1) or MSDOS
rawrite from the tools directory on the cd. Rawrite doesnt work if you are
an NT user, so you can also use fdimage or ntrw.exe which are both
also in the tools directory. 

To use dd, do the following:

# dd if=floppy25.fs of=/dev/fd0a 

or to whichever device you want to write the floppy binary to. 

After that is completed, boot from your media of choice, (cdrom or
bootdisk) and answer the questions accordingly. Here is an example
installation. 

Example Install 


4.2 - Installation via FTP

The ftp installation is almost the same as the normal installation. The same
bootdisk will be used. 

floppy25.fs 

Just like the CD install you will set up your disk, then when you specify
install media you choose (f)tp. You must take care to give the proper
settings when you are asked to configure your network. Have handy,
your ipaddress (see below for dhcp), netmask, nameserver addresses,
and default route. Once your network is configured correctly, you must
choose the (f)tp installation option. You will be asked a few simple
questions about proxys and passive or active transfers, and the you will
be presented with a list of ftp servers. Select the one closest to you, and
your on your way. 

Consult the install text for help. 


4.3 - Installation via DHCP

Installation via DHCP is the same as ftp, except your system will use
DHCP to configure your network. When you arrive at the network config
option, choose DHCP and your network will be setup accordingly. The
all you have to do is follow the remainder of the directions from ftp install
above and you will be set. 

Consult the install text for help. 


4.4 - What files are needed for Installation?

There are many packages containing the OpenBSD binaries, but which
ones do you need to get your system up and running? Here is an
overview of each package. 

     base25.tar.gz - Has the BASE OpenBSD system *NEEDED* 
     etc25.tar.gz - Has all the files in /etc *NEEDED* 
     comp25.tar.gz - Has the compiler and its tools, libs.
     *STRONGLY SUGGESTED* 
     man25.tar.gz - Holds man pages *STRONGLY SUGGESTED* 
     misc25.tar.gz - Holds misc info, setup docs 
     text25.tar.gz - Holds more text files, and setup documentation 
     game25.tar.gz - Has the Games for OpenBSD *FUN* 
     xbase25.tar.gz - Has the base install for X11 
     xfont25.tar.gz - Holds X11's font server and fonts 
     xlink25.tar.gz - Has the X servers link kit 
     xserv25.tar.gz - Has X11's X servers 
     xshare25.tar.gz - Has manpages, locale settings, includes, etc for
     X 


4.5 - Using the OpenBSD disklabel

Be sure to check the disklabel(8) man page! 

Disklabel is used to identify disk's and/or partitions. The main idea behind
them is abstraction of disk hardware, since there exists several partitioning
tables. A disklabel is a universal partitioning table. These labels tell the
system everything about the disk, from the Maker to rpm's to
track-to-track seek. This label resides on the beginning of the disk, this
isto help bootstrap code use them (since most ROM based booting reads
the first sectors of the first disk). It also will show you partitions and their
types on your disk. Disklabel can, on some systems, be used to install
bootstrap code. 

As an additional gain, using disklabels helps overcome architecture
limitations on disk partitioning. For example on i386 you can only have 4
primary partitions, with disklabel you can put several labels on one
partition (eg. 'swap', '/', '/usr' and '/var'). And you still have 3 more
partitions available for other OSs! 

You can think of them as 'subpartitions' for installation purposes. But they
are a necesity for kernel disk access based on geometry. And remember
to use 'b' for the swap label, and 'a' for root filesystem (default names in
kernel). 

To just view the current disklabel for your disk just do:
# disklabel < disk-device name >
This will give output similar to this:

# using MBR partition 3: type A6 off 64 (0x40) size 16777152 (0xffffc0)
# /dev/rwd0c:
type: ESDI
disk: 
label: TOSHIBA MK2720FC
flags:
bytes/sector: 512
sectors/track: 63
tracks/cylinder: 16
sectors/cylinder: 1008
cylinders: 2633
total sectors: 2654064
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
drivedata: 0 

16 partitions:
#        size   offset    fstype   [fsize bsize   cpg]
  a:  2071440    65583    4.2BSD     1024  8192    16   # (Cyl.   65*- 2120)
  b:    65520       63      swap                        # (Cyl.    0*- 65)
  c:  2654064        0    unused        0     0         # (Cyl.    0 - 2632)
  j:   512001  2137023    4.2BSD     1024  8192    16   # (Cyl. 2120*- 2627*)

In this example, there are 4 labels - A, B, C, J. A is one main partition, B
is swap, and J is another partition. C in all cases represents the full disk.
This is helpful in showing what valuses in size, cyl, etc you have to work
with. But with this command you cannot change any values, you can just
view. 

To be able to edit your label's interactivly you would use the -E flag.
Example:

# disklabel -E wd0
# using MBR partition 3: type A6 off 64 (0x40) size 16777152 (0xffffc0)

Treating sectors 64-16777216 as the OpenBSD portion of the disk.
You can use the 'b' command to change this.

Initial label editor (enter '?' for help at any prompt)
> ?
Available commands:
        p [unit]  - print label.
        M         - show entire OpenBSD man page for disklabel.
        e         - edit drive parameters.
        a [part]  - add new partition.
        b         - set OpenBSD disk boundaries.
        c [part]  - change partition size.
        d [part]  - delete partition.
        m [part]  - modify existing partition.
        r         - recalculate free space.
        u         - undo last change.
        s [path]  - save label to file.
        w         - write label to disk.
        q         - quit and save changes.
        x         - exit without saving changes.
        ? [cmnd]  - this message or command specific help.
Numeric parameters may use suffixes to indicate units:
        'b' for bytes, 'c' for cylinders, 'k' for kilobytes, 'm' for megabytes,
        'g' for gigabytes or no suffix for sectors (usually 512 bytes).
        Non-sector units will be rounded to the nearest cylinder.
Entering '?' at most prompts will give you (simple) context sensitive help.
> p 
device: /dev/rwd0c
type: ESDI
disk: 
label: TOSHIBA MK2720FC
bytes/sector: 512
sectors/track: 63
tracks/cylinder: 16
sectors/cylinder: 1008
cylinders: 2633
total sectors: 2654064
free sectors: 14193711
rpm: 3600

16 partitions:
#        size   offset    fstype   [fsize bsize   cpg]
  a:  2071440    65583    4.2BSD     1024  8192    16   # (Cyl.   65*- 2120)
  b:    65520       63      swap                        # (Cyl.    0*- 65)
  c:  2654064        0    unused        0     0         # (Cyl.    0 - 2632)
  j:   512001  2137023    4.2BSD     1024  8192    16   # (Cyl. 2120*- 2627*)
> q
No changes.

In this example we get into disklabel's interactive mode. From here we
can issue the command "?" asking for help. This gives us many commands
we can use to add, delete, edit existing labels. 

There is a new feature on disklabel, to help installation. The '-f' flag writes
a 'fstab' like file, if given a mount point for a label. This is only used at
installation. 

To see an example install involving disklabel check log25.txt 


4.6 - Using fdisk

First be sure to check the fdisk main page. fdisk(8) 

Fdisk is a program to help with the maintenance of your partitions. This
program is used at install time to set up your OpenBSD partition (this
partition can contain several labels, each with filesystems/swap/etc.). It
can divide space on your drives and set one active. This program will
usually be used in Single User Mode ( boot -s ). Fdisk also sets the MBR
on your various hard disks. 

For installation purposes, most times you'll only need ONE Openbsd
partition, and then using disklabel to put a swap and a filesystem on it. 

To just view your partition table using fdisk just use:
# fdisk fd0
Which will give an output similar to this:

         Disk: fd0       geometry: 80/2/18 [2880 sectors]
         Offset: 0       Signatures: 0xAA55,0x0
                  Starting        Ending
          #: id  cyl  hd sec -  cyl  hd sec [     start -       size]
----------------------------------------------------------------------
         *0: A6    0   0   1 -   79   1  18 [         0 -       2880] OpenBSD
          1: 00    0   0   0 -    0   0   0 [         0 -          0] unused
          2: A7    0   0   2 -   79   1  18 [         1 -       2879] NEXTSTEP
          3: 00    0   0   0 -    0   0   0 [         0 -          0] unused

In this example we are viewing the fdisk output of floppy drive. We can
see the OpenBSD partition (A6) and its size. The * tells us that the
OpenBSD partition is a bootable partition. 

In the previous example we just viewed our information. What if we want
to edit our partition table? Well, to do so we must use the -e flag. This
will bring up a command line prompt to interact with fdisk. 

# fdisk -e wd0
Enter 'help' for information
fdisk: 1> help
        help            Command help list
        manual          Show entire OpenBSD man page for fdisk
        reinit          Re-initialize loaded MBR (to defaults)
        disk            Edit current drive stats
        edit            Edit given table entry
        flag            Flag given table entry as bootable
        update          Update machine code in loaded MBR
        select          Select extended partition table entry MBR
        print           Print loaded MBR partition table
        write           Write loaded MBR to disk
        exit            Exit edit of current MBR, without saving changes
        quit            Quit edit of current MBR, saving current changes
        abort           Abort program without saving current changes
fdisk: 1> 
 

It is perfectly safe in fdisk to go in and explore, just make sure to answer
N to saving the changes and *DON'T* use the write command. 

Here is an overview of the commands you can use when you choose the
-e flag.

     help Display a list of commands that fdisk understands in the
     interactive edit mode. 
     reinit Initialize the currently selected, in-memory copy of the boot
     block. 
     disk Display the current drive geometry that fdisk has probed.
     You are given a chance to edit it if you wish. 
     edit Edit a given table entry in the memory copy of the current
     boot block. You may edit either in BIOS geometry mode, or in
     sector offsets and sizes. 
     flag Make the given partition table entry bootable. Only one entry
     can be marked bootable. If you wish to boot from an extended
     partition, you will need to mark the partition table entry for the
     extended partition as bootable. 
     update Update the machine code in the memory copy of the
     currently selected boot block. 
     select Select and load into memory the boot block pointed to by
     the extended partition table entry in the current boot block. 
     print Print the currently selected in-memory copy of the boot
     block and its MBR table to the terminal. 
     write Write the in-memory copy of the boot block to disk. You
     will be asked to confirm this operation. 
     exit Exit the current level of fdisk, either returning to the previously
     selected in-memory copy of a boot block, or exiting the program if
     there is none. 
     quit Exit the current level of fdisk, either returning to the previously
     selected in-memory copy of a boot block, or exiting the program if
     there is none. Unlike exit it does write the modified block out. 
     abort Quit program without saving current changes. 


4.7 - Adding new disks in OpenBSD

Well once you get your disk installed PROPERLY you need to use
fdisk(8) and disklabel(8) to set up your disk in OpenBSD. Making sure
that the partition ID is 'A6'. Once you have done this, OpenBSD will be
able to recognize the new disk, and you need to create the filesystem on
that disk using newfs(8). 

bsd# newfs wd1a 

or so on using OpenBSD's disk numbering scheme 

  wd0
  wd1
  wd2

Edit fstab to mount the new disk at a mount point of your choice, and
reboot. 

If you need to migrate an existing directory like /usr/bin. You should
mount the new drive in /mnt and use cpio -pdum to copy /usr/bin to the
/mnt directory. Edit the /etc/fstab file to show that /usr/bin will be mounted
on the new drive. example: 

/dev/wd1a /usr/bin ffs rw 1 1 

Reboot into single user mode..boot -s Move the existing /usr/bin to
/usr/bin-backup and create an empty /usr/bin. Then reboot the system,
and whala!! the files are there! 


4.8 - How do I swap to a file?

First make a kernel with vnd0c as swap. If you have wd0a as root
filesystem, wd0b is the previous swap, use this line in the kernel
configuration file (refer to compiling a new kernel if in doubt): 

config          bsd     root on wd0a swap on wd0b and vnd0c dumps on wd0b

Second make the file for swap. If you want a 32MB swapfile named
/newswap do: 

# dd if=/dev/zero of=/newswap bs=1k count=32768 

Add a line to your /etc/fstab file to indicate where the new swap will be. 

/dev/vnd0c none sw 0 0 

Now boot with the new kernel. Then create the vnd0 device to use that
file as a device: 

# vnconfig -c -v vnd0 /newswap 

And add it now to swap: 

# swapon /dev/vnd0c 

You can now see if it is working with: 

# pstat -s 


4.9 - Softupdates

Softupdates are experimental and are NOT recomended for
regular users. 

Please read http://www.openbsd.org/softupdate.html 

To enable Softupdates your kernel must have option 

option FFS_SOFTUPDATES 

then you need to boot into single-user mode: 

boot>boot -s
[snip]
bsd# tunefs -s enable <raw device>
bsd# reboot -n

GOOD LUCK. you just might need it. 


4.10 - How much space do I need for an
OpenBSD installation?

The following are suggested sub-tree sizes for a full system install. The
numbers include enough extra space to permit you to run a typical home
system that is connected to the internet: 

SYSTEM          /       /usr    /var    /usr/X11R6
alpha           50M     433M    20M     160MB
amiga           27M     173M    20M      64M
arc             47M     268M    20M      60M
hp300           26M     120M    20M      50M
i386            30M     172M    20M      85M
mac68k          26M     172M    20M      75M
mvme68k         26M     173M    20M      60MB (no Xserver)
pmax            44M     267M    20M      60M
sparc           35M     194M    20M      50M

When you are in the disklabel editor, you may choose to make your
entire system have just an 'a' and 'b' partition. The 'a' partition you set up
in disklabel will become your root partition, which should be the sum of
all the 3 main values above (/, /usr, and /var) plus some space for /tmp.
The 'b' partition you set up automatically becomes your system swap
partition -- we recommend a minimum of 32MB but if you have disk to
spare make it at least 64MB. 

However, we recommend you use many seperate partitions so that users
cannot fill up your important partitions as easily, thus causing nasty denial
of service problems. If you are extra cautious, you will make at least the
following seperate partitions: / swap /usr /var /tmp /var/tmp /home. 


4.11 - How do I get rid of "partition 3 id 0"
error on boot?

The solution to this is problem is using a bootloader. The OpenBSD cd
has the os-bs bootloader included in the tools directory. If you didn't
purchase a CD-ROM, you can download os-bs from any of the
OpenBSD ftp sites. 

pub/OpenBSD/2.5/tools/osbs135.exe 

and take some time to look through the web pages at
http://www.prz.tu-berlin.de/~wolf/os-bs.html 

There are also other commercial bootloaders or lilo that you can use for
multi-booting. 


4.12 - How do I get a dmesg from a boot
floppy?

RAMDISK images (boot floppies) do not ship with the dmesg utility.
They do, however, have the /kern filesystem mounted. To copy the
dmesg information to a file, do a: 

# cat /kern/msgbuf >mydmesg

4.13 - Installing bootblocks (i386 specific)

PC BIOS's can only deal with disk geometries with 1024 cylinders or
less. Since most disks these days have more than 1024 cylinders, most
PC scsi controllers "translate" the real disk geometry into something that
fits within the BIOS's parameters. However, not all scsi controllers
"translate" the geometry in the same way. If you change scsi controllers
and they use a different "translated" geometry you will be unable to load
the second stage boot loader (and thus unable to load the kernel) because
the first stage boot loader contains a list of the blocks that comprise /boot
in terms of the "translated" geometry. To fix this, just boot from a boot
floppy and at the boot prompt, type "b hd0a:/bsd" to boot from the first
hard disk (and not the floppy). Your machine should come up normally.
You now need to update the first stage boot loader (aka the boot block).
This is also the same way to for any disk device, ide disks and scsi disks
in OpenBSD. 
To do this, assuming your boot disk is sd0: 

cd /usr/mdec; ./installboot /boot biosboot sd0

5.0 - Kernel Configuration and
Disk Setup

5.1 - Why would I want to create my own
custom kernel?

Its a joyous occasion when you as a user get to configure and build your
own custom kernel. Why would you want to do this though? 

     You can define which drivers your computer has support for. 
     You can get rid of uneeded drivers in the GENERIC kernel 
     Speed up boot times 
     Remove default options or add options which may not have been
     enabled by default 

5.2 - Kernel Configuration Options

Kernel Configuration Options are options that you add to your kernel
configuration that place certain features into your kernel. This allows you
to have exactly the support you want, without having support for uneeded
devices. There are multitudes of options that allow you to customize you
kernel. Here we will go over only some of them, one's that are most
commonly used. Check the options(4) man page for a more complete list
of options. You can also check the example configuration files that are
availible for your architecture. 

     Alpha Kernel Conf Files 
     i386 Kernel Configuration files 
     mac68k Kernel Configuration files 
     pmax Kernel Configuration Files 
     sparc Kernel Configuration Files 
     Other Arch's 

OpenBSD has a great many compatibility options which allow you to use
binaries from other OS's. Not all are availibly on every architechture, so
be sure to read the man pages for each option to see if your arch is
supported. 

     compat_svr4(8) - Compatibility with SVR4 binaries. 
     compat_bsdos(8) - Compatibility with BSD/OS binaries. 
     compat_linux(8) - Compatibility with Linux binaries. 
     compat_sunox(8) - Compatibility with SunOS binaries. 
     compat_ultrix(8) - Compatibility with Ultrix binaries. 
     compat_freebsd(8) - Compatibility with FreeBSD binaries. 
     compat_hpux - Compatibility with HP-UX binaries. Only availible
     on some m68k arch's. 
     compat_ibcs2(8) - Compatibility to run ibcs2 binaries. 
     compat_osf1 - Run Digital Unix binaries. Availible only on Alpha
     platform. 

5.3 - Building your own kernel

Full instructions for creating your own custom kernel are in the
afterboot(8) man page. 

To compile your kernel from the cdrom do the following: 

#cd /somewhere
#cp /usr/src/sys/arch/$ARCH/conf/SOMEFILE .
#vi SOMEFILE (to make the changes you want)
#config -s /usr/src/sys -b . SOMEFILE
#make 

To compile a kernel inside a writeable source tree do the following: 

#cd /sys/arch/$ARCH/conf
#vi SOMEFILE (to make any changes you want)
#config SOMEFILE (read more about it here : config(8))
#cd ../compile/SOMEFILE
#make 

Where $ARCH is the architecture you are using (e.g. i386). You can also
do a make depend to make the dependencies for the next time you
compile your kernel. 

To move your kernel into place. 

#cp /bsd /bsd.old
#cp /sys/arch/$ARCH/compile/SOMEFILE/bsd /bsd

To revert to your old kernel at boot you need to just 

boot>bsd.old

and your old kernel will be loaded instead of /bsd. 

5.4 - Boot Time Configuration 

Sometimes when booting your system you might notice that the kernel
finds your device but maybe at the wrong IRQ. And maybe you need to
use this device right away. Well, without rebuilding the kernel you can use
OpenBSD's boot time kernel configuration. This will only correct your
problem for one time. If you reboot, you will have to repeat this
procedure. So, this is only meant as a temporary fix, and you should
correct the problem by fixing and recompiling your kernel. 

Most of this document can be found in the man page boot_config(8) 

To boot into the User Kernel Config, or UKC, at boot time us the -c
option. 

Boot> boot wd0a:/bsd -c

Or whichever kernel it is you want to boot. Doing this will bring up a
UKC prompt. From here you can issue commands directly to the kernel
specifying devices you want to change or disable or even enable. 

Here is a list of common commands in the UKC. 

add device - Add a device through copying another 

change devno | device - Modify one or more devices 

disable devno | device - Disable one or more devices 

enable devno | device - Enable one or more devices 

find devno | device - Find one or more devices 

help - Short summary of these commands 

list - List ALL known devices 

exit/quit - Continue Booting 

show [attr [val]] - Show devices with an attribute and
optional with a specified value 

Once you get your device configured, use quit or exit and continue
booting. After so you should correct your Kernel configuration and
Compile a new kernel. Refer to Building your own kernel for help. 


6.0 - Networking




6.1 - Initial Network Setup

Interfaces

Here we assume you have all your network interfaces working, and a
basic TCP/IP knowledge. If not, go to the Kernel Configuration and
Setup section, and/or read a nice intro to TCP/IP. Other recommended
reading are the ifconfig(8) and netstat(1) man pages. 

All your interfaces should be listed with: 

# ifconfig -a

lo0: flags=8009<UP,LOOPBACK,MULTICAST>
        inet 127.0.0.1 netmask 0xff000000
lo1: flags=8008<LOOPBACK,MULTICAST>
xl0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST>
        media: Ethernet 100baseTX half-duplex
        inet 10.1.1.1 netmask 0xffffff00 broadcast 10.1.1.255
sl0: flags=c010&ltPOINTOPOINT,LINK2,MULTICAST>
        inet 10.1.1.1 netmask 0xffffff00 broadcast 10.1.1.255
sl0: flags=c010<POINTOPOINT,LINK2,MULTICAST>
sl1: flags=c010<POINTOPOINT,LINK2,MULTICAST>
ppp0: flags=8010<POINTOPOINT,MULTICAST>
ppp1: flags=8010<POINTOPOINT,MULTICAST>
tun0: flags=10<POINTOPOINT>
tun1: flags=10<POINTOPOINT>
enc0: flags=8<LOOPBACK>

First there is lo0 the loopback interface. It MUST have the assigned
address of 127.0.0.1 no matter what network setup you use. The next
important one is xl0 in this example (could be neX or epX depending on
the brand), which is a board itself. Look it has UP and RUNNING flags
on, as lo0 but no other interface have them. That means oviously they are
working. Your interface could be down if you never configured it, and
look like the other interfaces. The others are not part of this section, as sl
and ppp are for serial line comunication, tun is a pseudo-device for
tunneling and enc a pseudo-device for encryption. 

If xl0 was uninitialized, you can assign it an address creating a ascii file
/etc/hostname.xl0 having a string like this: 

inet mona 255.255.255.0 NONE

Here "mona" is a name that exists as a record in /etc/hosts: 

10.1.1.1        mona    mona.openbsd.org.ar

Now check that you have a file /etc/myname and a file /etc/mygate. If you
don't have them, you need to create them. If your gateway is a machine
named "wintermute" wich is also in the /etc/hosts, use this commands: 

# echo "mona" >> /etc/myname; echo "wintermute" >> /etc/mygate

Ok, you are done for a standalone system, but to activate your
configuration now (without rebooting) do: 

# sh /etc/netstart

This will give you a few errors, but don't worry as all them are concerning
127.0.0.x (loopback) 

Note: if you want to use the system as a gateway, later there's a "Firewall
Setup" section, but you need to read all this first. 

Now check your routes are ok (here we use -n aso to make it simpler to
look at): 

# netstat -rn
Routing tables

Internet:
Destination        Gateway            Flags     Refs     Use    Mtu
Interface
default            10.1.1.254         UGS         0        0      -  xl0
10.1.1/24          link#1             UC          0        0      -  xl0
10.1.1.1           127.0.0.1          UGHS        0        0      -  lo0
10.1.1.254         link#1             UHL         1        0      -  xl0
127/8              127.0.0.1          UGRS        0        0      -  lo0
127.0.0.1          127.0.0.1          UH          3       24      -  lo0
224/8              link#1             UCS         0        0      -  xl0

Encap:
Source address/netmask          Port  Destination address/netmask     Port Proto SA(Address/SPI/Proto)

(The gateway here is shown as 10.1.1.254) 

IP Aliasing

If you want to map more than one IP address on a single network
interface, you need to assign an "alias" to it. The way to do it on
OpenBSD is simply assigning the interface another IP with the "alias"
option like this: 

# ifconfig xl0 alias 10.1.1.2 netmask 255.255.255.255

Here ne2 is assigned another IP number (remember it already has
10.1.1.1). Note the netmask used! Don't use 255.255.255.0 in this kind
of cases (both numbers are on the same subnet), only ONE address
shoud handle the subnet. If you do such kind of misconfiguration the
following error appears: 

ifconfig:SIOCAIFADDR: File exists

Now let's change the configuration file for this, /etc/ifaliases. Add to it this
line: 

xl0   10.1.1.2 255.255.255.255

DNS Client Setup

Let's assume your DNS servers are 125.2.3.4 and 125.2.3.5, and your
machine namme belongs to the domain yourdomain.com. Add the
following lines to your /etc/resolv.conf file: 

domain yourdomain.com
nameserver 125.2.3.4
nameserver 125.2.3.5

Gateway Setup

This is a minimal explanation, only for internal/secure networks! Read
Firewall Setup if you plan to put a gateway to internet. 

If you want to put a host that connects two subnets, and you want it to
"forward" any packet from them modify /etc/sysctl.conf line that toggles
the forwarding variable on bootup: 

net.inet.forwarding=1

To make the changes without booting: 

# sysctl -w net.inet.ip.forwarding=1
net.inet.ip.forwarding: 0 -> 1

Now modify the routes on the other hosts on both sides. 

6.2 - IPF/NAT Setup

IPF and IPNAT Setup

The IPFilter package was created to handle with two tasks, dealing with
packet level forwarding permissions and mapping hosts/subnets to a
range of external addresses. The configuration files are /etc/ipf.rules and
/etc/ipnat.rules, and also part of /etc/ 

rc.conf to activate them at boot time. You also need to have
net.inet.ip.forwarding=1! You also need a kernel compiled with option
IPFILTER and IPFILTER_LOG (the GENERIC one present in the
installation have them). 

There are a lot of nice examples on /usr/share/ipf/ for both. We
recommend you to choose the one closer to what you want, and modify it
to fit your needs. 

IPF

Modify rc.conf so it has IPFILTER=YES. The file /etc/ipf.rules has a
simple yet powerful syntax. Here we deal with the most common ways of
usage, for a more strict definition see man 5 ipf. Here is assumed xl0 as
the external interface to internet, on this one uses to have more rules than
internal interfaces. 

Configurations usually start letting everything come and go, and then apply
the necesary rules to block offending packets. So this is first: 

pass out from any to any
pass in from any to any 

Now lets block any incoming connection to port 82 tcp (eg. there's an
internal network report agent using http running on several hosts): 

block in on xl0 proto tcp from any to any port = 82

This rule means: 

"Block all incoming packets on xl0 interface whose protocol is TCP no
matter destination/origin using port 82" 

If you want to log all rejected packets add "log" after "block in", or "log
quick" if you don't want it to send a message to every console root is
logged in. 

Also a typical rule is to block rpc portmap: 

block in log on xl0 proto udp from any to any port = sunrpc

IPNAT

Based on RFC 1631, ipnat provides an easy way to map internal
networks on a range of external addresses. This is very useful if you don't
have officially asigned addresses for every host on your internal network.
When you set up private/internal networks you can take advantage of
reserved address blocks like: 

10.0.0.0, 192.168.0.0, and 172.16.0.0

If you have an internal network using 192.168.0.0 and you want to give
them access to internet using OpenBSD (of course!) and a ppp
connection using address 200.1.2.3, use this rule: 

map ppp0 192.168.0.0/16 -> 200.1.2.3/32

Note the /16 and /32, this means: 

"Any outgoing connection whose comming from an address matching the
first 16 bits of 192.168.0.0 should be mapped on local address
200.1.2.3 (only one address since /32 means every bit)" 

But here arises a problem. You are assigning a lot of addresses to only
ona (or a few) address. The way to go arount it is to map TCP and UDP
ports to a certain range with the option "portmap". But remember ICMP
doesnt work this way, it only has an ID field (usually based on process
number). So now its like this: 

map ppp0 192.168.0.0/16 -> 200.1.2.3/32 portmap tcp/udp 1024:65000
map ppp0 192.168.0.0/16 -> 200.1.2.3/32

This way things work better. If you have a dynamic address assignment
(like regular dialup modem account), you can do this: 

map ppp0 192.168.0.0/16 -> ppp0/32 portmap tcp/udp 1024:65000
map ppp0 192.168.0.0/16 -> ppp0/32


Redirecting ports

This is another very handy feature of IPNAT. If you have a host on the
internal network (using private addresses), and you want to let incoming
connections to it, you just need a simple redirect rule. For example, if you
have a web server on internal network at 10.2.2.7 listening on port 80,
and want it to be accesible from the outside simply redirecting external IP
120.2.3.4 on xl0, just add this rule to /etc/ipnat.rules: 

rdr xl0 120.2.3.4 port 80 -> 10.2.2.7 port 80

This is a little graph: 

Internet <--> (xl0) OpenBSD (xl1) <--> LAN <--> 10.2.2.7
            128.2.3.4      whatever  10.2.2.0   Web server

Remember to activate kernel must have option IP FORWARDING. Also
remember that EVERY packet MUST pass through the OpenBSD box,
i.e. you can't redirect ports to hosts on the same network and address
external to the OpenBSD box. 


6.3 - IPSEC

Be sure to check vpn man page. 

You can also check Codetalker 


6.4 - DHCP

This section is not yet completed. Please Check back soon. 


6.5 - PPP 

PPP is generally an easy thing to set up. What follows is a basic intro
based on the information provided in /etc/ppp and the ppp(8) manual
pages. These are highly suggested reading before attempting to setup PPP
or even reading this FAQ entry. If you have read these the following
should look farmiliar because it is that info with a little bit of elaboration. 

First you will need to find out a little bit about how your ISP sets up its
PPP connections. Does it use scripted login, PAP, CHAP, do you have a
dynamic or static IP etc. This along with some basic info about your
modem will allow us to easily create a PPP dial in script for your ISP. 

First we will create a PPP conf using what is already in
/etc/ppp/ppp.conf.sample as a guide. The first section we come to
is the section labeled default. This is the best place to specify logging
options, your modem device and dial options. It will always be executed
when ppp is run. The following is the default section that comes standard
with /etc/ppp/ppp.conf.sample and an explanation of what each
parameter does: 

<Default Section> 

default:
set log Phase Chat LCP IPCP CCP tun command      #This parameter tells PPP to log output which pertains 
                                                 #to the arguments you give the parameter.

set device /dev/cua01                            #This will set the default modem device on the system 
                                                 #which here is comm 2.

set speed 115200                                 #This parameter sets the speed of the serial device.

set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" AT OK-AT-OK ATE1Q0 OK \\dATDT\\T TIMEOUT 40 CONNECT"
                                                 #This will set the commands to follow when certian actions 
                                                 #take place while dialing.  Abort the call if the number is 
                                                 #busy, abort the call if there is no carrier.  Wait 5 seconds for 
                                                 #carrier. Issue AT and wait for response. If AT is ok then dial the 
                                                 #number and timeout if not connected in 40 seconds. Once dialed
                                                 #in wait for the CONNECT message to tell us we are connected.

Now that the default modem options are set we will need to create a
section in the ppp.conf for our ISP. Below are a few examples of what
could be in there and what type of isp they are tailored for. 

<MyISP Section> 

myisp:
set phone 1234567                        #This of course sets the number to dial for your isp.

set login "ABORT NO\\sCARRIER TIMEOUT 5 ogin:--ogin: ppp word: ppp"
                                         #This sets the login options.  It will abort login if
                                         #there is no carrier with a timeout of 5 seconds.  It 
                                         #will then wait for the login: prompt and send
                                         #your login name, and then it will wait for the password 
                                         #prompt and send your password.

set timeout 120                          #This sets the timeout for the entire login process.

set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
                                         #This will set the ip address you expect your your side 
                                         #and for the remote side of the connection. The /0 bit 
                                         #tells the connection that no bits of this ip address 
                                         #need to match and the whole thing can be replaced. 
                                         #This also sets your default netmask and gateway.

add default HISADDR                      #This will make the default gateway the remote end of 
                                         #the ppp connection.

enable dns                               #This tells ppp to ask the peer for the nameserver 
                                         #addresses that should be used. This isnt always supported, 
                                         #but if it is /etc/resolv.conf will automatically be updated.

<Pap/Chap Section> 

What if your ISP uses PAP or CHAP? Here is a configuration that will
work with both PAP or CHAP, PPP will decide which it needs to use. 

myispPAPCHAP:
set PHONE 1234567                        #This line sets the phone number.

set LOGIN                                #PPP will be waiting for the peer to suggest the use of 
                                         #either PAP or CHAP.

set authname MyName                      #This is where you specify your username.

set authkey MyKey                        #This is where you specify your password.

set timeout 120                          #This sets the login timeout to 120 seconds.

And then procede with the standard commands from above. 

<Static Ip Section> 

All you need to do is change the ifaddr parameter like so: 

set ifaddr 209.115.93.18 209.115.93.20

In this example, your ip is 209.115.93.18, and the peer side ip is
209.115.93.20. 
7.0 - Keyboard controls

7.1 - How do I remap the keyboard?

By using kcon(1), "kcon - keyboard control and remapping for the pcvt
driver" 

Example: 

bsd# kcon -m gb will load the keycap file for Great Britain. 

7.2 - Is there gpm or the like in OpenBSD?

No. But if you are willing to make a port. Please share. :) 


8.0 - General Questions


8.1 - What are these Kerberos warning
when I first login?

When you first install your system you will most likely notice a warning
message that is something like this: 

Warning: no Kerberos tickets issued. 

THIS WARNING IS COMPLETELY IRRELEVANT AND
SHOULD ONLY BE REMOVED IF COMPLETELY
NECESSARY 

Well since you probably haven't set up Kerberos on your system, you
wouldn't be getting a ticket. If you do have Kerberos running, you need
to check into that. If you can't STAND that warning and never plan on
using Kerberos here is how to get rid of it for good. 

     Make sure you have the source code. 
     Edit /usr/share/mk/bsd.own.mk and set KERBEROS to 'no', or
     create an /etc/mk.conf file that does this. 
     cd /usr/src/usr.bin/login ; make clean ; make ; make install 


8.2 - How do I change virtual terminals?

Simply type [ctrl] - [alt] - [One of the function keys] or
just hit [f9]-[f12] which are just mapped to [ctrl] - [alt] functions.
(i386) 

Only the i386 arch has virtual terminal capabilities. You can also use
virtual terminals when using X. For example, If you start X on term 1, and
switch with [ctrl]-[alt]-[F2] to term 2, X will seem to disapear and will
not come back by simply switching back to term 1. You must
[ctrl]-[alt]-[F5] to get your X display back. 


8.3 - I forgot my root password, what do I
do now?

A few steps to recovery 

   1.Boot into single user mode. For i386 arch type boot -s at the boot
     prompt. 
   2.mount the drives. 
          bsd# fsck -p / && mount -u / 
          if /usr is on a different partition you need to mount that also 
   3.type passwd 
   4.boot into mulituser mode.. and REMEMBER your password . 

8.4 - X wont start, I get tons of error
messages

If you have X completely set up and you are using an XF86Config that
you know works then the problem most likely lies in the
machdep.allowapature. You also need to make sure that both: 

option XSERVER
option APERTURE

are in you kernel configuration. [BOTH these are in the GENERIC
kernel] 

Then you need to edit /etc/sysctl.conf and set machdep.allowaperture=1.
This will allow X to access the aperture driver. This would be set up if the
question during install about whether or not you would be running X was
answered correctly. OpenBSD 2.4 requires for all X servers that the
aperture driver be set, because it controls access to the I/O ports on
video boards. 

For other X problems on the i386, consult the XFree86 FAQ at
http://www.xfree86.org/FAQ/. 

8.5 - What is CVS? and How do I use it?

CVS is what the OpenBSD project uses to control changes to the source
code. CVS stands for Concurrent Versions System. You can read more
about CVS at http://www.cyclic.com/. CVS can be used by the end user
to keep up to date with source changes, and changes in the ports tree. 

CVS makes it extremely simple to download the source via one of the
many CVS mirrors for the project. 

Here are some simple commands to get you going on CVS. 

For all these commands a CVSROOT variable must be set. You
can do this by: 

If you use csh or tcsh use:
bsd# setenv CVSROOT anoncvs@anoncvs.ca.openbsd.org:/cvs

or if you use sh or ksh use:
bsd# export
CVSROOT="anoncvs@anoncvs.ca.openbsd.org:/cvs" 

It is best to try to find a mirror that is closest to you. You can obtain a list
of CVS mirrors from http://www.openbsd.org/anoncvs.html. 

All these commands are run from the /usr directory if you do not have the
source code already. The source or ports however can be initially
downloaded in tarred and gzipped form from any of the ftp servers. They
are set and ready to be used with CVS. 

     bsd# cvs -q get -PAd src [to get source code] or 
     bsd# cvs -q get -PAd ports [to get the ports tree] 

If you already have an existing source or ports tree: 

     bsd# cvs -q up -PAd src 
     bsd# cvs -q up -PAd ports 

For some, bandwidth and time are serious problems when updating
repository's such as these. So CVS has a -z[1-9] option which uses gzip
to compress the data. To use it, do -z[compression-level], for instance,
-z3 for a compression level of 3. 

There are many different connections you can make to a CVS mirror.
This is to accompany people from all types of networks, whether you are
behind a firewall, etc. 

You can make either a ssh, rsh, or pserver connection to the servers.
Many mirrors also run ssh on port 2022. 

To do this you can use the variable $CVS_RSH. rsh(1) is what CVS
uses by default, but using the $CVS_RSH environment variable you can
have CVS use ssh. 
An example: 

#setenv CVS_RSH /usr/local/bin/ssh
or
#export CVS_RSH=/usr/local/bin/ssh 

8.6 - What is the ports tree?

The ports tree is a set of Makefiles that download, patch, configure and
install userland programs so you can run them an OpenBSD environment
without having to do all that by hand. You can get the ports tree from any
of the OpenBSD ftp servers in /pub/OpenBSD/2.5/ports.tar.gz or
try the latest updates in /pub/OpenBSD/snapshots/ports.tar.gz. 

If you want to run one of the latest ports collections, you'll need to update
your /usr/share/mk/ directory. CVS up your /usr/src/ directory
and do a: 

# cd /usr/src/share/mk/
# make install

first. 

In 2.5-current this information is now stored in the ports tree. In
ports/infrastructure/ all thats left in /usr/src/share/mk for ports is just a
pointer to this new area. 

Ports are set up to be EXTREMELY easy to make and install. Here is an
example install for someone wanting to install the X11 program xfig.
You'll notice the dependencies are automaticly detected and completed: 

fenetyllin:/usr/ports/graphics/xfig# make install
===>  Extracting for xfig-3.2.2
===>  xfig-3.2.2 depends on shared library: jpeg.62. - /usr/local/lib/libjpeg.so.62.0 found
===>  xfig-3.2.2 depends on shared library: Xaw3d.6. - not found
===>  Verifying install for Xaw3d.6. in /usr/ports/x11/Xaw3d
>> Xaw3d-1.3.tar.gz doesn't seem to exist on this system.
>> Attempting to fetch from ftp://crl.dec.com/pub/X11/contrib/widgets/Xaw3d/R6.1/.
Connected to crl.dec.com.
220 crl.dec.com FTP server (Digital UNIX Version 5.60) ready.
331 Guest login ok, send ident as password.
230 Guest login ok, access restrictions apply.
Remote system type is UNIX.
Using binary mode to transfer files.
200 Type set to I.
250 CWD command successful.
250 CWD command successful.
Retrieving pub/X11/contrib/widgets/Xaw3d/R6.1/Xaw3d-1.3.tar.gz
local: Xaw3d-1.3.tar.gz remote: Xaw3d-1.3.tar.gz
227 Entering Passive Mode (192,58,206,2,5,14)
150 Opening BINARY mode data connection for Xaw3d-1.3.tar.gz (0.0.0.0,0) (290277 bytes).
100% |**************************************************|   283 KB    00:00 ETA
226 Transfer complete.
290277 bytes received in 101.09 seconds (2.80 KB/s)
221 Goodbye.
===>  Extracting for Xaw3d-1.3
/bin/mkdir -p /usr/ports/x11/Xaw3d/work/xc/lib/Xaw3d/X11/Xaw3d
cd /usr/ports/x11/Xaw3d/work/xc/lib/Xaw3d/X11/Xaw3d; ln -sf ../../*.h .
===>  Patching for Xaw3d-1.3
===>  Configuring for Xaw3d-1.3
mv -f Makefile Makefile.bak
imake -DUseInstalled -I/usr/X11R6/lib/X11/config
make Makefiles
[snip]

You can see a list of both ports and packages by using the pkg_info
command. 

bsd# /usr/sbin/pkg_info
zsh-3.0.5           The Z shell.
screen-3.7.4        A multi-screen window manager.
ssh-1.2.21          Secure shell client and server (remote login program).
emacs-20.2          GNU editing macros.
lynx-2.7.1ac-0.107  An alphanumeric display oriented World-Wide Web Client.
tcsh-6.07.02        An extended C-shell with many useful features.
bash-2.01           The GNU Borne Again Shell.
zip-2.2             Create/update ZIP files compatabile with pkzip.
mm-2.7              Implementation of MIME, the Multipurpose Internet Mail Exten
ircii-2.8.2-epic3.004 An enhanced version of ircII, the Internet Relay Chat client
ispell-3.1.20       An interactive spelling checker.
tin-1.3.970930      TIN newsreader (termcap based)
procmail-3.11p7     A local mail delivery agent.
strobe-1.03         Fast scatter/gather TCP port scanner
lsof-4.15           Lists information about open files.
xntp3-5.92          Network Time Protocol Implementation.
ncftp-2.4.3        
 nmh-0.27            The New MH mail handling program
bzip2-0.1p12        A block-sorting file compressor

If you are looking for a specific program in the ports tree, you can try 

fenetyllin:/usr/ports/# make search key="xfig"
Port:   xfig-3.2.2
Path:   /home/ports/graphics/xfig
Info:   A drawing program for X11
Maint:  angelos@openbsd.org
Index:  graphics x11
B-deps: Xaw3d-1.3 jpeg-6b
R-deps: Xaw3d-1.3 ghostscript-5.10 gv-3.5.8 jpeg-6b png-1.0.2 transfig-3.2.1
Archs:  any

Port:   transfig-3.2.1
Path:   /home/ports/print/transfig
Info:   Tools to convert Xfig's .fig files.
Maint:  angelos@openbsd.org
Index:  print
B-deps: jpeg-6b
R-deps: ghostscript-5.10 jpeg-6b png-1.0.2
Archs:  any
[snip]

More information about the ports can be found in the ports man page 

Our ports tree is constantly being expanded, and if you would like to help
please see: http://www.openbsd.org/ports.html 


8.7 - What are packages?

Packages are the precompiled binaries of some of the most used
programs. They are ready for use on an OpenBSD system. Again, like
the ports, packages are very easy to maintain and update. Packages are
constantly being added so be sure to check each release for additional
packages. 

Here is a list of tools used in managing packages.

     pkg_add (1) - a utility for installing software package distributions 
     pkg_create (1) - a utility for creating software package
     distributions 
     pkg_delete (1) - a utility for deleting previously installed software
     package distributions 
     pkg_info (1) - a utility for displaying information on software
     packages 

Here is a sample user installing ispell via a package: 

bsd# pkg_add
ftp://ftp.openbsd.org/pub/OpenBSD/2.5/packages/${arch}/ispell-3.1.20.tgz

where ${arch} is your architecture 

Again, like with ports you can use the pkg_info(1) program to view what
is already installed on your system. 

To delete packages you will want to use the pkg_delete(1) command. It
is used the same way as pkg_add(1). 

bsd# /usr/sbin/pkg_delete ispell-3.1.20 

and it is gone. 

Packages can be found on any of the OpenBSD ftp mirror sites.
Http://www.OpenBSD.org/ftp.html
or they can be found on your OpenBSD CD's. 

8.8 - Is there any way to use my floppy
drive if it's not attached during boot?

Sure. You need to add "flags 0x20" at the end of the fd* entry and
recompile your kernel. The line should be read: 

fd* at fdc? drive ? flags 0x20 

After that you would be able to use the floppy drive all the time. It doesn't
matter if you plugged it later after boot. 


9.0 - Migrating from Linux 



9.1 - Simple tips for Linux users

There are several differences between OpenBSD and Linux. These
differences include but are not limited to, bootup procedure, network
interface usage and disk management. Most differences are well
documented, but involve searching manpages. This document tries to be
an index of those differences. 

     OpenBSD has a ports tree. This is to accomodate the fact that at
     this point not many applications are native to the OpenBSD
     environment. This is both an attempt to get applications to work on
     OpenBSD for end-users and to get more applications made with
     OpenBSD in mind. Eventually this ports tree will be used to make
     a nice set of binary packages. 
     OpenBSD uses CVS for source changes. Unlike Linux which is
     done primarily thru separate distributions, OpenBSD uses CVS
     which allows anyone to extract the full source tree at ANY given
     time. OpenBSD also does periodically release snapshots for
     various architectures and makes a CD release every 6 months. 
     OpenBSD contains STRONG CRYPTO, which USA based OS's
     can't contain. (See http://www.openbsd.org/crypto.html)
     OpenBSD has also gone thru heavy security auditing and many
     security features have already been implemented into the source
     tree. (IPSEC, KERBEROS). 
     OpenBSD's kernel is /bsd. 
     The names of hard disks are usually /dev/wd and /dev/sd
     (ATA/SCSI) 
     /sbin/ifconfig with no arguments in Linux gives the state of all the
     interfaces. Under OpenBSD you need the -a flag. 
     /sbin/route with no arguments in Linux gives the state of all the
     active routes. Under OpenBSD you need the "show" parameter, or
     do a netstat -r (nice). 
     IP-Masquerading is done through ipnat. (ipnat(1)) 
     ipfwadm is done through ipf (ipf(1), ipf(5)) 
     Interface address is stored in /etc/hostname.<interfacename>. It
     can be a name instead of an IP address. 
     The machine name is in /etc/myname 
     The default gateway is in /etc/mygate 
     The network interface aliases are in /etc/ifaliases 
     OpenBSD's default shell is csh. Shells such as bash and tcsh can
     be added as packages or installed from the ports tree. 
     Password management changes a lot. The main files are different.
     (passwd(1), passwd(5)) 


9.2 - Dual booting Linux and OpenBSD

Yes! it is possible! 

Read INSTALL.linux 

10.0 - System Administration



10.1 - Why does it say that I'm in the
wrong group when I su to root?

To be able to use su(1) to root you must be in group 0, "wheel". This
MUST be placed specifically in /etc/group. It isn't enough to have
them listed in /etc/passwd. Once this is done you should be able to su
correctly. 


10.2 - How do I duplicate a filesystem?

Use dump/restore. For example. To duplicate everything under directory
SRC to directory DST, do a: 

# cd /SRC; dump 0f - . | (cd /DST; restore -rf - )

10.3 - How do I get httpd, sendmail, etc to
startup with the system?

OpenBSD uses rc-style startup to control starting applications with the
system. For common daemons you can simply edit /etc/rc.conf. 
For example: To have ftpd started on boot change - 

ftpd_flags=NO -- > ftpd_flags="-D"

You can add any flags that you wish ftpd to start with. 

If you have your own daemon's that you want to be started, here is a
simple entry that you can put into /etc/rc.local.

if [ -x /usr/local/sbin/mydaemon ]; then
        echo -n ' mydaemon';       /usr/local/sbin/mydaemon
fi


Once in there, it will come up with the system each time. 

10.4 - Why do users get relaying access
denied when they are remotely sending
mail through my OpenBSD system?

Try this: 

cat /etc/sendmail.cf | grep relay-domains

The output may look something like this: 

FR-o /etc/mail/relay-domains

If this file doesn't exist, create it. You will need to enter the users who are
sending mail remotely with the following syntax: 

.domain.com    #if it is dynamic
sub.domain.com #if static

Don't forget to: 

kill -1 `cat /var/run/sendmail.pid`


10.5 - I've set up POP, but users have
trouble accessing mail thru POP. What can
i do?

Most issues dealing with pop are accessing files, mainly temp files. Some
clients give errors such as: 

-ERR Couldn't open temporary file, do you own it?K

Try setting up your permissions as such: 

permission in  /var
drwxrwxr-x   2 bin     mail     512 May 26 20:08 mail


permissions in  /var/mail
-rw-------   1 username   username        0 May 26 20:08 username

Double check that the user owns his file in /var/mail , this should be done
by default. 

10.6 - Setting up a Secure HTTP server
with SSL(8)

This will take you through all the steps it takes to set up your own Secure
HTTP server. Since the OpenBSD 2.5 release, OpenBSD has shipped
with ssleay. Because of copyrighted RSA algorigthms, these cannot be
shipped with OpenBSD. libssl includes support for SSL version 2, SSL
version 3, and TLS version 1. So for now, because of copyright
restictions, OpenBSD must ship without a fully-functional libssl. But it is
still completely useable. If you are able to use the RSA patented library's
you can easily upgrade your libssl with a command like this. 

#pkg_add
ftp://ftp.openbsd.org/pub/OpenBSD/${ver}/packages/${arch}/libssl-1.1.tgz

Where ${ver} is the OpenBSD version number, and ${arch} is your
architecture. 

The steps shown here are taken pretty much from the ssl(8) man page.
So you can refer to that for further information. Also, this faq will only go
over creating a RSA certificate for web servers, not a DSA server
certificate. To find out how to do so, please refer to the ssl(8) man page. 

I will no show how to create your key and certificate. These will go to
/etc/ssl/private/. This means that you will have to have upgraded your
libssl. Now we can create our key. You can do so with a line like such: 

# ssleay genrsa -out /etc/ssl/private/server.key 1024 

This will create a key of 1024 bits. Next you need to create a
Certificate Signing Request which is used to get a CA or Certificate
Authority to sign your key. Here is the command to do so. 

# ssleay req -new -key /etc/ssl/private/server.key -out
/etc/ssl/private/server.csr 

You would now give /etc/ssl/private/server.csr to the CA to get it signed.
Or you could also sign the certificate for yourself. Here is how you would
do this. 

# ssleay x509 -req -days 365 -in /etc/ssl/private/server.csr -signkey
/etc/ssl/private/server.key -out /etc/ssl/server.crt 

This will sign your key, and it will be valid for up to 365 days. With this
done you can now start the httpd server. To start httpd(8) with ssl you
must start the daemon with the -DSSL flag. You can start this on boot in
/etc/rc.conf by changing the httpd line to look like so: 

httpd_flags="-DSSL"

This server will run on port 443. 

10.7 - I edited /etc/passwd with vi(1), but
the changes didn't seem to take place.
Why?

Changes will not be made right away because OpenBSD has a user
database which needs updated when changes are made in /etc/passwd.
Tools are made to do this immediatly for you though. You should use
vipw(8) to edit the passwd file by hand. This will allow for checking of the
passwd file before entering it into the database and after the check is
done it will automatically execute pwd_mkdb(8). If you have made
changes, without using a tool such as vipw, you can run pwd_mkdb(8) by
hand. 

10.8 - What is the best way to add users?
and delete them?

The best way to add a user in OpenBSD is to use the adduser(8) script.
You can configure this to work however you like by editing
/etc/adduser.conf. You can add users by hand, but this is the
recommended way to addusers. adduser(8) allows for consistancy
checks on /etc/passwd, /etc/group, and shell databases. It will create
then entries for you, and HOME directory, and even send a message to
the user welcoming them. This can be changed to meet your needs. For
further instructions on adding users read the adduser_proc(8) man page. 

To delete users you should use the rmuser(8) utility. This will remove all
existance of a user. It will remove any crontab(1) entries, their HOME dir
(if it is owned by the user). Along with their /etc/passwd and /etc/group
entries. 

10.9 - How do i create an ftp-only account?

There are a few ways to do this, but a very common way to do such is to
add /usr/bin/false into /etc/shells. Then when you create the user set his
shell to /usr/bin/false, this they he will not be able to get a shell but will be
able to keep their ftp capabilities. adduser(8) will give them a home dir by
default of /home/foo. If this is what you desire it doesn't need to be
changed, however you can set this to whatever directory you wish. 


11.0 - OpenBSD 2.4 Specific
Information



11.1 - In 2.4 why do I get UserDir error
when running httpd?

It seems as though userdir support was left out of 2.4. Make sure to pick
up the patch at: 

http://www.openbsd.org/errata.html 

11.2 - Installing at a partition 4GB or
higher

The 2.4 cd's shipped with a problem in installboot. A patch can be
obtained here http://www.openbsd.org/errata.html. This is fixed in
-current. 

To place the partition boot record, installboot used a 32 bit multiplication
for the sectors times the sectorsize which is larger than 2^32 -1 (i.e.
multiplication overflow) when the partition starts at 4 GB or higher. This
means the pbr is installed in the reall partition address modulo 4GB. It's
still possible to install at >= 4GB with some effort: 

You have 2 Options for doing so with OpenBSD 2.4. If you have Linux
or any other unix like OS, you should back up the sectors first before
trying anything. 

     Suppose the partition starts at cylinder 611, and the drive has 255
     heads, 63 sectors: offset for the obsd partition is 611*255*63=
     9815715 sectors. multiply this by 512 and you get: 5025646080.
     5025646080 mod 2^32 = 730678784 

     (You can just subtract 2^32 on a hand calculator...) dividing by
     512 gives sector 1427107. 

     Ok, suppose were now in linux (where cylinder numbers are 1
     higher btw..) and that the obsd partition is DOS partition 4: 

     dd if=/dev/hda of=backup.txt skip=1427107 bs=512 count=1 

     will backup the data that installboot will nuke .. 

     Now install OpenBSD. Return to Linux. 

     Now we're going to copy the partition boot record to the right
     place. 

     dd if=/dev/hda of=pbr.txt skip=1427107 bs=512 count=1 
     dd if=/pbr.txt of=/dev/hda4 bs=512 count=1 

     (adding obsd to lilo should now work) 

     Now write back the nuked sector: 

     dd if=/backup.txt of=/dev/hda seek=1427107 bs=512
     count=1 

     Caveat: make sure that whatever gets nuked by installboot isn't
     essential to running dd (and starting the other OS). Backing up the
     affected partition is recommended. 

     Use a correct version of installboot (compiled for you by another
     OBSD'er ..): 

     put it on another partition, e.g. a DOS partition. Suppose wd0j is
     the DOS partition (see disklabel wd0, this is in case of IDE disks),
     and installboot is named installb there. 

     After booting from floppy/CD, press ^C to get into the shell: 
          mkdir dos
          mount /dev/wd0j dos
          cp dos/tmp/installb /usr/mdec/installboot

Now enter 'install' and the installation procedure should use the new
installboot. 

12.0 - Performance Tuning



12.1 - Networking

If you run a busy gateway or firewall, you should make sure you prevent
memory starvation. 

Add these to your kernel config and compile a custom kernel: 

     option "NMBCLUSTERS=8192" 
     option "MAX_KMAP=120" 
     option "MAX_KMAPENT=6000" 
     option "NKMEMCLUSTERS=8192" 

12.2 - Disk I/O

Disk I/O is, on any system, a main factor in the overall speed of the
computer. And is also a part of any system that needs protected the most.
OpenBSD has a couple of options you can choose from when it comes to
disk fault tolerence. 

The first option is the use of ccd(4). CCD(4) is what is called a
Concatenated Disk Driver. This basically allows you to combine one or
more disks into what is called a "virtual disk" As in, the system see's it as
one disk, and uses it as such. This concept is similar to that of LVM,
which is found in many commercial flavors. To start setup of CCD, you
need to add support for it in your kernel. A line such as: 

pseudo-device   ccd     4       # concatenated disk devices

would allow for 4 CCD devices. Which happens to be the MAX number
of CCD devices allowed. 

NOTE: Support is in the GENERIC Kernel. 

One of the many things you can do through the use of CCD is provide for
"striping", which can definately give a performance boost. 

Another solution is raid(4) which will have you use raidctl(8). to control
your raid devices. Through the use of RAIDframe devices you can
achieve both striping and mirroring. OpenBSD has support for RAID
levels of 0, 1, 4, and 5. With raid, as with CCD, support must be in the
KERNEL. 

pseudo-device   raid   4       # RAIDframe disk device

As with the CCD kernel support, Support is in the GENERIC kernel. 

For fileservers with enough memory, you can increase
BUFCACHEPERCENT. To do this you should add a line to your kernel
configuration like this: 

option BUFCACHEPERCENT=50 

Or whatever number you want it set too. 

Another tool that can be used to speed up your is softupdates. You can
read more about these at http://www.OpenBSD.org/softupdates.html or
you can read the softupdates FAQ entry. 




$OpenBSD: obsd-faq.txt,v 1.1 1999/05/30 23:34:39 ericj Exp $


